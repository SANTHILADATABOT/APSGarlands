/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./Modules/Media/node_modules/dropzone/dist/dropzone.js":
/*!**************************************************************!*\
  !*** ./Modules/Media/node_modules/dropzone/dist/dropzone.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\r\n\r\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\r\n\r\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\r\n\r\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\n/*\r\n *\r\n * More info at [www.dropzonejs.com](http://www.dropzonejs.com)\r\n *\r\n * Copyright (c) 2012, Matias Meno\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n\r\n// The Emitter class provides the ability to call `.on()` on Dropzone to listen\r\n// to events.\r\n// It is strongly based on component's emitter class, and I removed the\r\n// functionality because of the dependency hell with different frameworks.\r\nvar Emitter = function () {\r\n  function Emitter() {\r\n    _classCallCheck(this, Emitter);\r\n  }\r\n\r\n  _createClass(Emitter, [{\r\n    key: \"on\",\r\n\r\n    // Add an event listener for given event\r\n    value: function on(event, fn) {\r\n      this._callbacks = this._callbacks || {};\r\n      // Create namespace for this event\r\n      if (!this._callbacks[event]) {\r\n        this._callbacks[event] = [];\r\n      }\r\n      this._callbacks[event].push(fn);\r\n      return this;\r\n    }\r\n  }, {\r\n    key: \"emit\",\r\n    value: function emit(event) {\r\n      this._callbacks = this._callbacks || {};\r\n      var callbacks = this._callbacks[event];\r\n\r\n      if (callbacks) {\r\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n          args[_key - 1] = arguments[_key];\r\n        }\r\n\r\n        for (var _iterator = callbacks, _isArray = true, _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\r\n          var _ref;\r\n\r\n          if (_isArray) {\r\n            if (_i >= _iterator.length) break;\r\n            _ref = _iterator[_i++];\r\n          } else {\r\n            _i = _iterator.next();\r\n            if (_i.done) break;\r\n            _ref = _i.value;\r\n          }\r\n\r\n          var callback = _ref;\r\n\r\n          callback.apply(this, args);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    // Remove event listener for given event. If fn is not provided, all event\r\n    // listeners for that event will be removed. If neither is provided, all\r\n    // event listeners will be removed.\r\n\r\n  }, {\r\n    key: \"off\",\r\n    value: function off(event, fn) {\r\n      if (!this._callbacks || arguments.length === 0) {\r\n        this._callbacks = {};\r\n        return this;\r\n      }\r\n\r\n      // specific event\r\n      var callbacks = this._callbacks[event];\r\n      if (!callbacks) {\r\n        return this;\r\n      }\r\n\r\n      // remove all handlers\r\n      if (arguments.length === 1) {\r\n        delete this._callbacks[event];\r\n        return this;\r\n      }\r\n\r\n      // remove specific handler\r\n      for (var i = 0; i < callbacks.length; i++) {\r\n        var callback = callbacks[i];\r\n        if (callback === fn) {\r\n          callbacks.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n\r\n      return this;\r\n    }\r\n  }]);\r\n\r\n  return Emitter;\r\n}();\r\n\r\nvar Dropzone = function (_Emitter) {\r\n  _inherits(Dropzone, _Emitter);\r\n\r\n  _createClass(Dropzone, null, [{\r\n    key: \"initClass\",\r\n    value: function initClass() {\r\n\r\n      // Exposing the emitter class, mainly for tests\r\n      this.prototype.Emitter = Emitter;\r\n\r\n      /*\r\n       This is a list of all available events you can register on a dropzone object.\r\n        You can register an event handler like this:\r\n        dropzone.on(\"dragEnter\", function() { });\r\n        */\r\n      this.prototype.events = [\"drop\", \"dragstart\", \"dragend\", \"dragenter\", \"dragover\", \"dragleave\", \"addedfile\", \"addedfiles\", \"removedfile\", \"thumbnail\", \"error\", \"errormultiple\", \"processing\", \"processingmultiple\", \"uploadprogress\", \"totaluploadprogress\", \"sending\", \"sendingmultiple\", \"success\", \"successmultiple\", \"canceled\", \"canceledmultiple\", \"complete\", \"completemultiple\", \"reset\", \"maxfilesexceeded\", \"maxfilesreached\", \"queuecomplete\"];\r\n\r\n      this.prototype.defaultOptions = {\r\n        /**\r\n         * Has to be specified on elements other than form (or when the form\r\n         * doesn't have an `action` attribute). You can also\r\n         * provide a function that will be called with `files` and\r\n         * must return the url (since `v3.12.0`)\r\n         */\r\n        url: null,\r\n\r\n        /**\r\n         * Can be changed to `\"put\"` if necessary. You can also provide a function\r\n         * that will be called with `files` and must return the method (since `v3.12.0`).\r\n         */\r\n        method: \"post\",\r\n\r\n        /**\r\n         * Will be set on the XHRequest.\r\n         */\r\n        withCredentials: false,\r\n\r\n        /**\r\n         * The timeout for the XHR requests in milliseconds (since `v4.4.0`).\r\n         */\r\n        timeout: 30000,\r\n\r\n        /**\r\n         * How many file uploads to process in parallel (See the\r\n         * Enqueuing file uploads* documentation section for more info)\r\n         */\r\n        parallelUploads: 2,\r\n\r\n        /**\r\n         * Whether to send multiple files in one request. If\r\n         * this it set to true, then the fallback file input element will\r\n         * have the `multiple` attribute as well. This option will\r\n         * also trigger additional events (like `processingmultiple`). See the events\r\n         * documentation section for more information.\r\n         */\r\n        uploadMultiple: false,\r\n\r\n        /**\r\n         * Whether you want files to be uploaded in chunks to your server. This can't be\r\n         * used in combination with `uploadMultiple`.\r\n         *\r\n         * See [chunksUploaded](#config-chunksUploaded) for the callback to finalise an upload.\r\n         */\r\n        chunking: false,\r\n\r\n        /**\r\n         * If `chunking` is enabled, this defines whether **every** file should be chunked,\r\n         * even if the file size is below chunkSize. This means, that the additional chunk\r\n         * form data will be submitted and the `chunksUploaded` callback will be invoked.\r\n         */\r\n        forceChunking: false,\r\n\r\n        /**\r\n         * If `chunking` is `true`, then this defines the chunk size in bytes.\r\n         */\r\n        chunkSize: 2000000,\r\n\r\n        /**\r\n         * If `true`, the individual chunks of a file are being uploaded simultaneously.\r\n         */\r\n        parallelChunkUploads: false,\r\n\r\n        /**\r\n         * Whether a chunk should be retried if it fails.\r\n         */\r\n        retryChunks: false,\r\n\r\n        /**\r\n         * If `retryChunks` is true, how many times should it be retried.\r\n         */\r\n        retryChunksLimit: 3,\r\n\r\n        /**\r\n         * If not `null` defines how many files this Dropzone handles. If it exceeds,\r\n         * the event `maxfilesexceeded` will be called. The dropzone element gets the\r\n         * class `dz-max-files-reached` accordingly so you can provide visual feedback.\r\n         */\r\n        maxFilesize: 256,\r\n\r\n        /**\r\n         * The name of the file param that gets transferred.\r\n         * **NOTE**: If you have the option  `uploadMultiple` set to `true`, then\r\n         * Dropzone will append `[]` to the name.\r\n         */\r\n        paramName: \"file\",\r\n\r\n        /**\r\n         * Whether thumbnails for images should be generated\r\n         */\r\n        createImageThumbnails: true,\r\n\r\n        /**\r\n         * In MB. When the filename exceeds this limit, the thumbnail will not be generated.\r\n         */\r\n        maxThumbnailFilesize: 10,\r\n\r\n        /**\r\n         * If `null`, the ratio of the image will be used to calculate it.\r\n         */\r\n        thumbnailWidth: 120,\r\n\r\n        /**\r\n         * The same as `thumbnailWidth`. If both are null, images will not be resized.\r\n         */\r\n        thumbnailHeight: 120,\r\n\r\n        /**\r\n         * How the images should be scaled down in case both, `thumbnailWidth` and `thumbnailHeight` are provided.\r\n         * Can be either `contain` or `crop`.\r\n         */\r\n        thumbnailMethod: 'crop',\r\n\r\n        /**\r\n         * If set, images will be resized to these dimensions before being **uploaded**.\r\n         * If only one, `resizeWidth` **or** `resizeHeight` is provided, the original aspect\r\n         * ratio of the file will be preserved.\r\n         *\r\n         * The `options.transformFile` function uses these options, so if the `transformFile` function\r\n         * is overridden, these options don't do anything.\r\n         */\r\n        resizeWidth: null,\r\n\r\n        /**\r\n         * See `resizeWidth`.\r\n         */\r\n        resizeHeight: null,\r\n\r\n        /**\r\n         * The mime type of the resized image (before it gets uploaded to the server).\r\n         * If `null` the original mime type will be used. To force jpeg, for example, use `image/jpeg`.\r\n         * See `resizeWidth` for more information.\r\n         */\r\n        resizeMimeType: null,\r\n\r\n        /**\r\n         * The quality of the resized images. See `resizeWidth`.\r\n         */\r\n        resizeQuality: 0.8,\r\n\r\n        /**\r\n         * How the images should be scaled down in case both, `resizeWidth` and `resizeHeight` are provided.\r\n         * Can be either `contain` or `crop`.\r\n         */\r\n        resizeMethod: 'contain',\r\n\r\n        /**\r\n         * The base that is used to calculate the filesize. You can change this to\r\n         * 1024 if you would rather display kibibytes, mebibytes, etc...\r\n         * 1024 is technically incorrect, because `1024 bytes` are `1 kibibyte` not `1 kilobyte`.\r\n         * You can change this to `1024` if you don't care about validity.\r\n         */\r\n        filesizeBase: 1000,\r\n\r\n        /**\r\n         * Can be used to limit the maximum number of files that will be handled by this Dropzone\r\n         */\r\n        maxFiles: null,\r\n\r\n        /**\r\n         * An optional object to send additional headers to the server. Eg:\r\n         * `{ \"My-Awesome-Header\": \"header value\" }`\r\n         */\r\n        headers: null,\r\n\r\n        /**\r\n         * If `true`, the dropzone element itself will be clickable, if `false`\r\n         * nothing will be clickable.\r\n         *\r\n         * You can also pass an HTML element, a CSS selector (for multiple elements)\r\n         * or an array of those. In that case, all of those elements will trigger an\r\n         * upload when clicked.\r\n         */\r\n        clickable: true,\r\n\r\n        /**\r\n         * Whether hidden files in directories should be ignored.\r\n         */\r\n        ignoreHiddenFiles: true,\r\n\r\n        /**\r\n         * The default implementation of `accept` checks the file's mime type or\r\n         * extension against this list. This is a comma separated list of mime\r\n         * types or file extensions.\r\n         *\r\n         * Eg.: `image/*,application/pdf,.psd`\r\n         *\r\n         * If the Dropzone is `clickable` this option will also be used as\r\n         * [`accept`](https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept)\r\n         * parameter on the hidden file input as well.\r\n         */\r\n        acceptedFiles: null,\r\n\r\n        /**\r\n         * **Deprecated!**\r\n         * Use acceptedFiles instead.\r\n         */\r\n        acceptedMimeTypes: null,\r\n\r\n        /**\r\n         * If false, files will be added to the queue but the queue will not be\r\n         * processed automatically.\r\n         * This can be useful if you need some additional user input before sending\r\n         * files (or if you want want all files sent at once).\r\n         * If you're ready to send the file simply call `myDropzone.processQueue()`.\r\n         *\r\n         * See the [enqueuing file uploads](#enqueuing-file-uploads) documentation\r\n         * section for more information.\r\n         */\r\n        autoProcessQueue: true,\r\n\r\n        /**\r\n         * If false, files added to the dropzone will not be queued by default.\r\n         * You'll have to call `enqueueFile(file)` manually.\r\n         */\r\n        autoQueue: true,\r\n\r\n        /**\r\n         * If `true`, this will add a link to every file preview to remove or cancel (if\r\n         * already uploading) the file. The `dictCancelUpload`, `dictCancelUploadConfirmation`\r\n         * and `dictRemoveFile` options are used for the wording.\r\n         */\r\n        addRemoveLinks: false,\r\n\r\n        /**\r\n         * Defines where to display the file previews – if `null` the\r\n         * Dropzone element itself is used. Can be a plain `HTMLElement` or a CSS\r\n         * selector. The element should have the `dropzone-previews` class so\r\n         * the previews are displayed properly.\r\n         */\r\n        previewsContainer: null,\r\n\r\n        /**\r\n         * This is the element the hidden input field (which is used when clicking on the\r\n         * dropzone to trigger file selection) will be appended to. This might\r\n         * be important in case you use frameworks to switch the content of your page.\r\n         */\r\n        hiddenInputContainer: \"body\",\r\n\r\n        /**\r\n         * If null, no capture type will be specified\r\n         * If camera, mobile devices will skip the file selection and choose camera\r\n         * If microphone, mobile devices will skip the file selection and choose the microphone\r\n         * If camcorder, mobile devices will skip the file selection and choose the camera in video mode\r\n         * On apple devices multiple must be set to false.  AcceptedFiles may need to\r\n         * be set to an appropriate mime type (e.g. \"image/*\", \"audio/*\", or \"video/*\").\r\n         */\r\n        capture: null,\r\n\r\n        /**\r\n         * **Deprecated**. Use `renameFile` instead.\r\n         */\r\n        renameFilename: null,\r\n\r\n        /**\r\n         * A function that is invoked before the file is uploaded to the server and renames the file.\r\n         * This function gets the `File` as argument and can use the `file.name`. The actual name of the\r\n         * file that gets used during the upload can be accessed through `file.upload.filename`.\r\n         */\r\n        renameFile: null,\r\n\r\n        /**\r\n         * If `true` the fallback will be forced. This is very useful to test your server\r\n         * implementations first and make sure that everything works as\r\n         * expected without dropzone if you experience problems, and to test\r\n         * how your fallbacks will look.\r\n         */\r\n        forceFallback: false,\r\n\r\n        /**\r\n         * The text used before any files are dropped.\r\n         */\r\n        dictDefaultMessage: \"Drop files here to upload\",\r\n\r\n        /**\r\n         * The text that replaces the default message text it the browser is not supported.\r\n         */\r\n        dictFallbackMessage: \"Your browser does not support drag'n'drop file uploads.\",\r\n\r\n        /**\r\n         * The text that will be added before the fallback form.\r\n         * If you provide a  fallback element yourself, or if this option is `null` this will\r\n         * be ignored.\r\n         */\r\n        dictFallbackText: \"Please use the fallback form below to upload your files like in the olden days.\",\r\n\r\n        /**\r\n         * If the filesize is too big.\r\n         * `{{filesize}}` and `{{maxFilesize}}` will be replaced with the respective configuration values.\r\n         */\r\n        dictFileTooBig: \"File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.\",\r\n\r\n        /**\r\n         * If the file doesn't match the file type.\r\n         */\r\n        dictInvalidFileType: \"You can't upload files of this type.\",\r\n\r\n        /**\r\n         * If the server response was invalid.\r\n         * `{{statusCode}}` will be replaced with the servers status code.\r\n         */\r\n        dictResponseError: \"Server responded with {{statusCode}} code.\",\r\n\r\n        /**\r\n         * If `addRemoveLinks` is true, the text to be used for the cancel upload link.\r\n         */\r\n        dictCancelUpload: \"Cancel upload\",\r\n\r\n        /**\r\n         * The text that is displayed if an upload was manually canceled\r\n         */\r\n        dictUploadCanceled: \"Upload canceled.\",\r\n\r\n        /**\r\n         * If `addRemoveLinks` is true, the text to be used for confirmation when cancelling upload.\r\n         */\r\n        dictCancelUploadConfirmation: \"Are you sure you want to cancel this upload?\",\r\n\r\n        /**\r\n         * If `addRemoveLinks` is true, the text to be used to remove a file.\r\n         */\r\n        dictRemoveFile: \"Remove file\",\r\n\r\n        /**\r\n         * If this is not null, then the user will be prompted before removing a file.\r\n         */\r\n        dictRemoveFileConfirmation: null,\r\n\r\n        /**\r\n         * Displayed if `maxFiles` is st and exceeded.\r\n         * The string `{{maxFiles}}` will be replaced by the configuration value.\r\n         */\r\n        dictMaxFilesExceeded: \"You can not upload any more files.\",\r\n\r\n        /**\r\n         * Allows you to translate the different units. Starting with `tb` for terabytes and going down to\r\n         * `b` for bytes.\r\n         */\r\n        dictFileSizeUnits: { tb: \"TB\", gb: \"GB\", mb: \"MB\", kb: \"KB\", b: \"b\" },\r\n        /**\r\n         * Called when dropzone initialized\r\n         * You can add event listeners here\r\n         */\r\n        init: function init() {},\r\n\r\n\r\n        /**\r\n         * Can be an **object** of additional parameters to transfer to the server, **or** a `Function`\r\n         * that gets invoked with the `files`, `xhr` and, if it's a chunked upload, `chunk` arguments. In case\r\n         * of a function, this needs to return a map.\r\n         *\r\n         * The default implementation does nothing for normal uploads, but adds relevant information for\r\n         * chunked uploads.\r\n         *\r\n         * This is the same as adding hidden input fields in the form element.\r\n         */\r\n        params: function params(files, xhr, chunk) {\r\n          if (chunk) {\r\n            return {\r\n              dzuuid: chunk.file.upload.uuid,\r\n              dzchunkindex: chunk.index,\r\n              dztotalfilesize: chunk.file.size,\r\n              dzchunksize: this.options.chunkSize,\r\n              dztotalchunkcount: chunk.file.upload.totalChunkCount,\r\n              dzchunkbyteoffset: chunk.index * this.options.chunkSize\r\n            };\r\n          }\r\n        },\r\n\r\n\r\n        /**\r\n         * A function that gets a [file](https://developer.mozilla.org/en-US/docs/DOM/File)\r\n         * and a `done` function as parameters.\r\n         *\r\n         * If the done function is invoked without arguments, the file is \"accepted\" and will\r\n         * be processed. If you pass an error message, the file is rejected, and the error\r\n         * message will be displayed.\r\n         * This function will not be called if the file is too big or doesn't match the mime types.\r\n         */\r\n        accept: function accept(file, done) {\r\n          return done();\r\n        },\r\n\r\n\r\n        /**\r\n         * The callback that will be invoked when all chunks have been uploaded for a file.\r\n         * It gets the file for which the chunks have been uploaded as the first parameter,\r\n         * and the `done` function as second. `done()` needs to be invoked when everything\r\n         * needed to finish the upload process is done.\r\n         */\r\n        chunksUploaded: function chunksUploaded(file, done) {\r\n          done();\r\n        },\r\n\r\n        /**\r\n         * Gets called when the browser is not supported.\r\n         * The default implementation shows the fallback input field and adds\r\n         * a text.\r\n         */\r\n        fallback: function fallback() {\r\n          // This code should pass in IE7... :(\r\n          var messageElement = void 0;\r\n          this.element.className = this.element.className + \" dz-browser-not-supported\";\r\n\r\n          for (var _iterator2 = this.element.getElementsByTagName(\"div\"), _isArray2 = true, _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\r\n            var _ref2;\r\n\r\n            if (_isArray2) {\r\n              if (_i2 >= _iterator2.length) break;\r\n              _ref2 = _iterator2[_i2++];\r\n            } else {\r\n              _i2 = _iterator2.next();\r\n              if (_i2.done) break;\r\n              _ref2 = _i2.value;\r\n            }\r\n\r\n            var child = _ref2;\r\n\r\n            if (/(^| )dz-message($| )/.test(child.className)) {\r\n              messageElement = child;\r\n              child.className = \"dz-message\"; // Removes the 'dz-default' class\r\n              break;\r\n            }\r\n          }\r\n          if (!messageElement) {\r\n            messageElement = Dropzone.createElement(\"<div class=\\\"dz-message\\\"><span></span></div>\");\r\n            this.element.appendChild(messageElement);\r\n          }\r\n\r\n          var span = messageElement.getElementsByTagName(\"span\")[0];\r\n          if (span) {\r\n            if (span.textContent != null) {\r\n              span.textContent = this.options.dictFallbackMessage;\r\n            } else if (span.innerText != null) {\r\n              span.innerText = this.options.dictFallbackMessage;\r\n            }\r\n          }\r\n\r\n          return this.element.appendChild(this.getFallbackForm());\r\n        },\r\n\r\n\r\n        /**\r\n         * Gets called to calculate the thumbnail dimensions.\r\n         *\r\n         * It gets `file`, `width` and `height` (both may be `null`) as parameters and must return an object containing:\r\n         *\r\n         *  - `srcWidth` & `srcHeight` (required)\r\n         *  - `trgWidth` & `trgHeight` (required)\r\n         *  - `srcX` & `srcY` (optional, default `0`)\r\n         *  - `trgX` & `trgY` (optional, default `0`)\r\n         *\r\n         * Those values are going to be used by `ctx.drawImage()`.\r\n         */\r\n        resize: function resize(file, width, height, resizeMethod) {\r\n          var info = {\r\n            srcX: 0,\r\n            srcY: 0,\r\n            srcWidth: file.width,\r\n            srcHeight: file.height\r\n          };\r\n\r\n          var srcRatio = file.width / file.height;\r\n\r\n          // Automatically calculate dimensions if not specified\r\n          if (width == null && height == null) {\r\n            width = info.srcWidth;\r\n            height = info.srcHeight;\r\n          } else if (width == null) {\r\n            width = height * srcRatio;\r\n          } else if (height == null) {\r\n            height = width / srcRatio;\r\n          }\r\n\r\n          // Make sure images aren't upscaled\r\n          width = Math.min(width, info.srcWidth);\r\n          height = Math.min(height, info.srcHeight);\r\n\r\n          var trgRatio = width / height;\r\n\r\n          if (info.srcWidth > width || info.srcHeight > height) {\r\n            // Image is bigger and needs rescaling\r\n            if (resizeMethod === 'crop') {\r\n              if (srcRatio > trgRatio) {\r\n                info.srcHeight = file.height;\r\n                info.srcWidth = info.srcHeight * trgRatio;\r\n              } else {\r\n                info.srcWidth = file.width;\r\n                info.srcHeight = info.srcWidth / trgRatio;\r\n              }\r\n            } else if (resizeMethod === 'contain') {\r\n              // Method 'contain'\r\n              if (srcRatio > trgRatio) {\r\n                height = width / srcRatio;\r\n              } else {\r\n                width = height * srcRatio;\r\n              }\r\n            } else {\r\n              throw new Error(\"Unknown resizeMethod '\" + resizeMethod + \"'\");\r\n            }\r\n          }\r\n\r\n          info.srcX = (file.width - info.srcWidth) / 2;\r\n          info.srcY = (file.height - info.srcHeight) / 2;\r\n\r\n          info.trgWidth = width;\r\n          info.trgHeight = height;\r\n\r\n          return info;\r\n        },\r\n\r\n\r\n        /**\r\n         * Can be used to transform the file (for example, resize an image if necessary).\r\n         *\r\n         * The default implementation uses `resizeWidth` and `resizeHeight` (if provided) and resizes\r\n         * images according to those dimensions.\r\n         *\r\n         * Gets the `file` as the first parameter, and a `done()` function as the second, that needs\r\n         * to be invoked with the file when the transformation is done.\r\n         */\r\n        transformFile: function transformFile(file, done) {\r\n          if ((this.options.resizeWidth || this.options.resizeHeight) && file.type.match(/image.*/)) {\r\n            return this.resizeImage(file, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, done);\r\n          } else {\r\n            return done(file);\r\n          }\r\n        },\r\n\r\n\r\n        /**\r\n         * A string that contains the template used for each dropped\r\n         * file. Change it to fulfill your needs but make sure to properly\r\n         * provide all elements.\r\n         *\r\n         * If you want to use an actual HTML element instead of providing a String\r\n         * as a config option, you could create a div with the id `tpl`,\r\n         * put the template inside it and provide the element like this:\r\n         *\r\n         *     document\r\n         *       .querySelector('#tpl')\r\n         *       .innerHTML\r\n         *\r\n         */\r\n        previewTemplate: \"<div class=\\\"dz-preview dz-file-preview\\\">\\n  <div class=\\\"dz-image\\\"><img data-dz-thumbnail /></div>\\n  <div class=\\\"dz-details\\\">\\n    <div class=\\\"dz-size\\\"><span data-dz-size></span></div>\\n    <div class=\\\"dz-filename\\\"><span data-dz-name></span></div>\\n  </div>\\n  <div class=\\\"dz-progress\\\"><span class=\\\"dz-upload\\\" data-dz-uploadprogress></span></div>\\n  <div class=\\\"dz-error-message\\\"><span data-dz-errormessage></span></div>\\n  <div class=\\\"dz-success-mark\\\">\\n    <svg width=\\\"54px\\\" height=\\\"54px\\\" viewBox=\\\"0 0 54 54\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:sketch=\\\"http://www.bohemiancoding.com/sketch/ns\\\">\\n      <title>Check</title>\\n      <defs></defs>\\n      <g id=\\\"Page-1\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" sketch:type=\\\"MSPage\\\">\\n        <path d=\\\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\\\" id=\\\"Oval-2\\\" stroke-opacity=\\\"0.198794158\\\" stroke=\\\"#747474\\\" fill-opacity=\\\"0.816519475\\\" fill=\\\"#FFFFFF\\\" sketch:type=\\\"MSShapeGroup\\\"></path>\\n      </g>\\n    </svg>\\n  </div>\\n  <div class=\\\"dz-error-mark\\\">\\n    <svg width=\\\"54px\\\" height=\\\"54px\\\" viewBox=\\\"0 0 54 54\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xmlns:sketch=\\\"http://www.bohemiancoding.com/sketch/ns\\\">\\n      <title>Error</title>\\n      <defs></defs>\\n      <g id=\\\"Page-1\\\" stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" sketch:type=\\\"MSPage\\\">\\n        <g id=\\\"Check-+-Oval-2\\\" sketch:type=\\\"MSLayerGroup\\\" stroke=\\\"#747474\\\" stroke-opacity=\\\"0.198794158\\\" fill=\\\"#FFFFFF\\\" fill-opacity=\\\"0.816519475\\\">\\n          <path d=\\\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\\\" id=\\\"Oval-2\\\" sketch:type=\\\"MSShapeGroup\\\"></path>\\n        </g>\\n      </g>\\n    </svg>\\n  </div>\\n</div>\",\r\n\r\n        // END OPTIONS\r\n        // (Required by the dropzone documentation parser)\r\n\r\n\r\n        /*\r\n         Those functions register themselves to the events on init and handle all\r\n         the user interface specific stuff. Overwriting them won't break the upload\r\n         but can break the way it's displayed.\r\n         You can overwrite them if you don't like the default behavior. If you just\r\n         want to add an additional event handler, register it on the dropzone object\r\n         and don't overwrite those options.\r\n         */\r\n\r\n        // Those are self explanatory and simply concern the DragnDrop.\r\n        drop: function drop(e) {\r\n          return this.element.classList.remove(\"dz-drag-hover\");\r\n        },\r\n        dragstart: function dragstart(e) {},\r\n        dragend: function dragend(e) {\r\n          return this.element.classList.remove(\"dz-drag-hover\");\r\n        },\r\n        dragenter: function dragenter(e) {\r\n          return this.element.classList.add(\"dz-drag-hover\");\r\n        },\r\n        dragover: function dragover(e) {\r\n          return this.element.classList.add(\"dz-drag-hover\");\r\n        },\r\n        dragleave: function dragleave(e) {\r\n          return this.element.classList.remove(\"dz-drag-hover\");\r\n        },\r\n        paste: function paste(e) {},\r\n\r\n\r\n        // Called whenever there are no files left in the dropzone anymore, and the\r\n        // dropzone should be displayed as if in the initial state.\r\n        reset: function reset() {\r\n          return this.element.classList.remove(\"dz-started\");\r\n        },\r\n\r\n\r\n        // Called when a file is added to the queue\r\n        // Receives `file`\r\n        addedfile: function addedfile(file) {\r\n          var _this2 = this;\r\n\r\n          if (this.element === this.previewsContainer) {\r\n            this.element.classList.add(\"dz-started\");\r\n          }\r\n\r\n          if (this.previewsContainer) {\r\n            file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());\r\n            file.previewTemplate = file.previewElement; // Backwards compatibility\r\n\r\n            this.previewsContainer.appendChild(file.previewElement);\r\n            for (var _iterator3 = file.previewElement.querySelectorAll(\"[data-dz-name]\"), _isArray3 = true, _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\r\n              var _ref3;\r\n\r\n              if (_isArray3) {\r\n                if (_i3 >= _iterator3.length) break;\r\n                _ref3 = _iterator3[_i3++];\r\n              } else {\r\n                _i3 = _iterator3.next();\r\n                if (_i3.done) break;\r\n                _ref3 = _i3.value;\r\n              }\r\n\r\n              var node = _ref3;\r\n\r\n              node.textContent = file.name;\r\n            }\r\n            for (var _iterator4 = file.previewElement.querySelectorAll(\"[data-dz-size]\"), _isArray4 = true, _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\r\n              if (_isArray4) {\r\n                if (_i4 >= _iterator4.length) break;\r\n                node = _iterator4[_i4++];\r\n              } else {\r\n                _i4 = _iterator4.next();\r\n                if (_i4.done) break;\r\n                node = _i4.value;\r\n              }\r\n\r\n              node.innerHTML = this.filesize(file.size);\r\n            }\r\n\r\n            if (this.options.addRemoveLinks) {\r\n              file._removeLink = Dropzone.createElement(\"<a class=\\\"dz-remove\\\" href=\\\"javascript:undefined;\\\" data-dz-remove>\" + this.options.dictRemoveFile + \"</a>\");\r\n              file.previewElement.appendChild(file._removeLink);\r\n            }\r\n\r\n            var removeFileEvent = function removeFileEvent(e) {\r\n              e.preventDefault();\r\n              e.stopPropagation();\r\n              if (file.status === Dropzone.UPLOADING) {\r\n                return Dropzone.confirm(_this2.options.dictCancelUploadConfirmation, function () {\r\n                  return _this2.removeFile(file);\r\n                });\r\n              } else {\r\n                if (_this2.options.dictRemoveFileConfirmation) {\r\n                  return Dropzone.confirm(_this2.options.dictRemoveFileConfirmation, function () {\r\n                    return _this2.removeFile(file);\r\n                  });\r\n                } else {\r\n                  return _this2.removeFile(file);\r\n                }\r\n              }\r\n            };\r\n\r\n            for (var _iterator5 = file.previewElement.querySelectorAll(\"[data-dz-remove]\"), _isArray5 = true, _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\r\n              var _ref4;\r\n\r\n              if (_isArray5) {\r\n                if (_i5 >= _iterator5.length) break;\r\n                _ref4 = _iterator5[_i5++];\r\n              } else {\r\n                _i5 = _iterator5.next();\r\n                if (_i5.done) break;\r\n                _ref4 = _i5.value;\r\n              }\r\n\r\n              var removeLink = _ref4;\r\n\r\n              removeLink.addEventListener(\"click\", removeFileEvent);\r\n            }\r\n          }\r\n        },\r\n\r\n\r\n        // Called whenever a file is removed.\r\n        removedfile: function removedfile(file) {\r\n          if (file.previewElement != null && file.previewElement.parentNode != null) {\r\n            file.previewElement.parentNode.removeChild(file.previewElement);\r\n          }\r\n          return this._updateMaxFilesReachedClass();\r\n        },\r\n\r\n\r\n        // Called when a thumbnail has been generated\r\n        // Receives `file` and `dataUrl`\r\n        thumbnail: function thumbnail(file, dataUrl) {\r\n          if (file.previewElement) {\r\n            file.previewElement.classList.remove(\"dz-file-preview\");\r\n            for (var _iterator6 = file.previewElement.querySelectorAll(\"[data-dz-thumbnail]\"), _isArray6 = true, _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {\r\n              var _ref5;\r\n\r\n              if (_isArray6) {\r\n                if (_i6 >= _iterator6.length) break;\r\n                _ref5 = _iterator6[_i6++];\r\n              } else {\r\n                _i6 = _iterator6.next();\r\n                if (_i6.done) break;\r\n                _ref5 = _i6.value;\r\n              }\r\n\r\n              var thumbnailElement = _ref5;\r\n\r\n              thumbnailElement.alt = file.name;\r\n              thumbnailElement.src = dataUrl;\r\n            }\r\n\r\n            return setTimeout(function () {\r\n              return file.previewElement.classList.add(\"dz-image-preview\");\r\n            }, 1);\r\n          }\r\n        },\r\n\r\n\r\n        // Called whenever an error occurs\r\n        // Receives `file` and `message`\r\n        error: function error(file, message) {\r\n          if (file.previewElement) {\r\n            file.previewElement.classList.add(\"dz-error\");\r\n            if (typeof message !== \"String\" && message.error) {\r\n              message = message.error;\r\n            }\r\n            for (var _iterator7 = file.previewElement.querySelectorAll(\"[data-dz-errormessage]\"), _isArray7 = true, _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {\r\n              var _ref6;\r\n\r\n              if (_isArray7) {\r\n                if (_i7 >= _iterator7.length) break;\r\n                _ref6 = _iterator7[_i7++];\r\n              } else {\r\n                _i7 = _iterator7.next();\r\n                if (_i7.done) break;\r\n                _ref6 = _i7.value;\r\n              }\r\n\r\n              var node = _ref6;\r\n\r\n              node.textContent = message;\r\n            }\r\n          }\r\n        },\r\n        errormultiple: function errormultiple() {},\r\n\r\n\r\n        // Called when a file gets processed. Since there is a cue, not all added\r\n        // files are processed immediately.\r\n        // Receives `file`\r\n        processing: function processing(file) {\r\n          if (file.previewElement) {\r\n            file.previewElement.classList.add(\"dz-processing\");\r\n            if (file._removeLink) {\r\n              return file._removeLink.textContent = this.options.dictCancelUpload;\r\n            }\r\n          }\r\n        },\r\n        processingmultiple: function processingmultiple() {},\r\n\r\n\r\n        // Called whenever the upload progress gets updated.\r\n        // Receives `file`, `progress` (percentage 0-100) and `bytesSent`.\r\n        // To get the total number of bytes of the file, use `file.size`\r\n        uploadprogress: function uploadprogress(file, progress, bytesSent) {\r\n          if (file.previewElement) {\r\n            for (var _iterator8 = file.previewElement.querySelectorAll(\"[data-dz-uploadprogress]\"), _isArray8 = true, _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {\r\n              var _ref7;\r\n\r\n              if (_isArray8) {\r\n                if (_i8 >= _iterator8.length) break;\r\n                _ref7 = _iterator8[_i8++];\r\n              } else {\r\n                _i8 = _iterator8.next();\r\n                if (_i8.done) break;\r\n                _ref7 = _i8.value;\r\n              }\r\n\r\n              var node = _ref7;\r\n\r\n              node.nodeName === 'PROGRESS' ? node.value = progress : node.style.width = progress + \"%\";\r\n            }\r\n          }\r\n        },\r\n\r\n\r\n        // Called whenever the total upload progress gets updated.\r\n        // Called with totalUploadProgress (0-100), totalBytes and totalBytesSent\r\n        totaluploadprogress: function totaluploadprogress() {},\r\n\r\n\r\n        // Called just before the file is sent. Gets the `xhr` object as second\r\n        // parameter, so you can modify it (for example to add a CSRF token) and a\r\n        // `formData` object to add additional information.\r\n        sending: function sending() {},\r\n        sendingmultiple: function sendingmultiple() {},\r\n\r\n\r\n        // When the complete upload is finished and successful\r\n        // Receives `file`\r\n        success: function success(file) {\r\n          if (file.previewElement) {\r\n            return file.previewElement.classList.add(\"dz-success\");\r\n          }\r\n        },\r\n        successmultiple: function successmultiple() {},\r\n\r\n\r\n        // When the upload is canceled.\r\n        canceled: function canceled(file) {\r\n          return this.emit(\"error\", file, this.options.dictUploadCanceled);\r\n        },\r\n        canceledmultiple: function canceledmultiple() {},\r\n\r\n\r\n        // When the upload is finished, either with success or an error.\r\n        // Receives `file`\r\n        complete: function complete(file) {\r\n          if (file._removeLink) {\r\n            file._removeLink.textContent = this.options.dictRemoveFile;\r\n          }\r\n          if (file.previewElement) {\r\n            return file.previewElement.classList.add(\"dz-complete\");\r\n          }\r\n        },\r\n        completemultiple: function completemultiple() {},\r\n        maxfilesexceeded: function maxfilesexceeded() {},\r\n        maxfilesreached: function maxfilesreached() {},\r\n        queuecomplete: function queuecomplete() {},\r\n        addedfiles: function addedfiles() {}\r\n      };\r\n\r\n      this.prototype._thumbnailQueue = [];\r\n      this.prototype._processingThumbnail = false;\r\n    }\r\n\r\n    // global utility\r\n\r\n  }, {\r\n    key: \"extend\",\r\n    value: function extend(target) {\r\n      for (var _len2 = arguments.length, objects = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\r\n        objects[_key2 - 1] = arguments[_key2];\r\n      }\r\n\r\n      for (var _iterator9 = objects, _isArray9 = true, _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {\r\n        var _ref8;\r\n\r\n        if (_isArray9) {\r\n          if (_i9 >= _iterator9.length) break;\r\n          _ref8 = _iterator9[_i9++];\r\n        } else {\r\n          _i9 = _iterator9.next();\r\n          if (_i9.done) break;\r\n          _ref8 = _i9.value;\r\n        }\r\n\r\n        var object = _ref8;\r\n\r\n        for (var key in object) {\r\n          var val = object[key];\r\n          target[key] = val;\r\n        }\r\n      }\r\n      return target;\r\n    }\r\n  }]);\r\n\r\n  function Dropzone(el, options) {\r\n    _classCallCheck(this, Dropzone);\r\n\r\n    var _this = _possibleConstructorReturn(this, (Dropzone.__proto__ || Object.getPrototypeOf(Dropzone)).call(this));\r\n\r\n    var fallback = void 0,\r\n        left = void 0;\r\n    _this.element = el;\r\n    // For backwards compatibility since the version was in the prototype previously\r\n    _this.version = Dropzone.version;\r\n\r\n    _this.defaultOptions.previewTemplate = _this.defaultOptions.previewTemplate.replace(/\\n*/g, \"\");\r\n\r\n    _this.clickableElements = [];\r\n    _this.listeners = [];\r\n    _this.files = []; // All files\r\n\r\n    if (typeof _this.element === \"string\") {\r\n      _this.element = document.querySelector(_this.element);\r\n    }\r\n\r\n    // Not checking if instance of HTMLElement or Element since IE9 is extremely weird.\r\n    if (!_this.element || _this.element.nodeType == null) {\r\n      throw new Error(\"Invalid dropzone element.\");\r\n    }\r\n\r\n    if (_this.element.dropzone) {\r\n      throw new Error(\"Dropzone already attached.\");\r\n    }\r\n\r\n    // Now add this dropzone to the instances.\r\n    Dropzone.instances.push(_this);\r\n\r\n    // Put the dropzone inside the element itself.\r\n    _this.element.dropzone = _this;\r\n\r\n    var elementOptions = (left = Dropzone.optionsForElement(_this.element)) != null ? left : {};\r\n\r\n    _this.options = Dropzone.extend({}, _this.defaultOptions, elementOptions, options != null ? options : {});\r\n\r\n    // If the browser failed, just call the fallback and leave\r\n    if (_this.options.forceFallback || !Dropzone.isBrowserSupported()) {\r\n      var _ret;\r\n\r\n      return _ret = _this.options.fallback.call(_this), _possibleConstructorReturn(_this, _ret);\r\n    }\r\n\r\n    // @options.url = @element.getAttribute \"action\" unless @options.url?\r\n    if (_this.options.url == null) {\r\n      _this.options.url = _this.element.getAttribute(\"action\");\r\n    }\r\n\r\n    if (!_this.options.url) {\r\n      throw new Error(\"No URL provided.\");\r\n    }\r\n\r\n    if (_this.options.acceptedFiles && _this.options.acceptedMimeTypes) {\r\n      throw new Error(\"You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.\");\r\n    }\r\n\r\n    if (_this.options.uploadMultiple && _this.options.chunking) {\r\n      throw new Error('You cannot set both: uploadMultiple and chunking.');\r\n    }\r\n\r\n    // Backwards compatibility\r\n    if (_this.options.acceptedMimeTypes) {\r\n      _this.options.acceptedFiles = _this.options.acceptedMimeTypes;\r\n      delete _this.options.acceptedMimeTypes;\r\n    }\r\n\r\n    // Backwards compatibility\r\n    if (_this.options.renameFilename != null) {\r\n      _this.options.renameFile = function (file) {\r\n        return _this.options.renameFilename.call(_this, file.name, file);\r\n      };\r\n    }\r\n\r\n    _this.options.method = _this.options.method.toUpperCase();\r\n\r\n    if ((fallback = _this.getExistingFallback()) && fallback.parentNode) {\r\n      // Remove the fallback\r\n      fallback.parentNode.removeChild(fallback);\r\n    }\r\n\r\n    // Display previews in the previewsContainer element or the Dropzone element unless explicitly set to false\r\n    if (_this.options.previewsContainer !== false) {\r\n      if (_this.options.previewsContainer) {\r\n        _this.previewsContainer = Dropzone.getElement(_this.options.previewsContainer, \"previewsContainer\");\r\n      } else {\r\n        _this.previewsContainer = _this.element;\r\n      }\r\n    }\r\n\r\n    if (_this.options.clickable) {\r\n      if (_this.options.clickable === true) {\r\n        _this.clickableElements = [_this.element];\r\n      } else {\r\n        _this.clickableElements = Dropzone.getElements(_this.options.clickable, \"clickable\");\r\n      }\r\n    }\r\n\r\n    _this.init();\r\n    return _this;\r\n  }\r\n\r\n  // Returns all files that have been accepted\r\n\r\n\r\n  _createClass(Dropzone, [{\r\n    key: \"getAcceptedFiles\",\r\n    value: function getAcceptedFiles() {\r\n      return this.files.filter(function (file) {\r\n        return file.accepted;\r\n      }).map(function (file) {\r\n        return file;\r\n      });\r\n    }\r\n\r\n    // Returns all files that have been rejected\r\n    // Not sure when that's going to be useful, but added for completeness.\r\n\r\n  }, {\r\n    key: \"getRejectedFiles\",\r\n    value: function getRejectedFiles() {\r\n      return this.files.filter(function (file) {\r\n        return !file.accepted;\r\n      }).map(function (file) {\r\n        return file;\r\n      });\r\n    }\r\n  }, {\r\n    key: \"getFilesWithStatus\",\r\n    value: function getFilesWithStatus(status) {\r\n      return this.files.filter(function (file) {\r\n        return file.status === status;\r\n      }).map(function (file) {\r\n        return file;\r\n      });\r\n    }\r\n\r\n    // Returns all files that are in the queue\r\n\r\n  }, {\r\n    key: \"getQueuedFiles\",\r\n    value: function getQueuedFiles() {\r\n      return this.getFilesWithStatus(Dropzone.QUEUED);\r\n    }\r\n  }, {\r\n    key: \"getUploadingFiles\",\r\n    value: function getUploadingFiles() {\r\n      return this.getFilesWithStatus(Dropzone.UPLOADING);\r\n    }\r\n  }, {\r\n    key: \"getAddedFiles\",\r\n    value: function getAddedFiles() {\r\n      return this.getFilesWithStatus(Dropzone.ADDED);\r\n    }\r\n\r\n    // Files that are either queued or uploading\r\n\r\n  }, {\r\n    key: \"getActiveFiles\",\r\n    value: function getActiveFiles() {\r\n      return this.files.filter(function (file) {\r\n        return file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED;\r\n      }).map(function (file) {\r\n        return file;\r\n      });\r\n    }\r\n\r\n    // The function that gets called when Dropzone is initialized. You\r\n    // can (and should) setup event listeners inside this function.\r\n\r\n  }, {\r\n    key: \"init\",\r\n    value: function init() {\r\n      var _this3 = this;\r\n\r\n      // In case it isn't set already\r\n      if (this.element.tagName === \"form\") {\r\n        this.element.setAttribute(\"enctype\", \"multipart/form-data\");\r\n      }\r\n\r\n      if (this.element.classList.contains(\"dropzone\") && !this.element.querySelector(\".dz-message\")) {\r\n        this.element.appendChild(Dropzone.createElement(\"<div class=\\\"dz-default dz-message\\\"><span>\" + this.options.dictDefaultMessage + \"</span></div>\"));\r\n      }\r\n\r\n      if (this.clickableElements.length) {\r\n        var setupHiddenFileInput = function setupHiddenFileInput() {\r\n          if (_this3.hiddenFileInput) {\r\n            _this3.hiddenFileInput.parentNode.removeChild(_this3.hiddenFileInput);\r\n          }\r\n          _this3.hiddenFileInput = document.createElement(\"input\");\r\n          _this3.hiddenFileInput.setAttribute(\"type\", \"file\");\r\n          if (_this3.options.maxFiles === null || _this3.options.maxFiles > 1) {\r\n            _this3.hiddenFileInput.setAttribute(\"multiple\", \"multiple\");\r\n          }\r\n          _this3.hiddenFileInput.className = \"dz-hidden-input\";\r\n\r\n          if (_this3.options.acceptedFiles !== null) {\r\n            _this3.hiddenFileInput.setAttribute(\"accept\", _this3.options.acceptedFiles);\r\n          }\r\n          if (_this3.options.capture !== null) {\r\n            _this3.hiddenFileInput.setAttribute(\"capture\", _this3.options.capture);\r\n          }\r\n\r\n          // Not setting `display=\"none\"` because some browsers don't accept clicks\r\n          // on elements that aren't displayed.\r\n          _this3.hiddenFileInput.style.visibility = \"hidden\";\r\n          _this3.hiddenFileInput.style.position = \"absolute\";\r\n          _this3.hiddenFileInput.style.top = \"0\";\r\n          _this3.hiddenFileInput.style.left = \"0\";\r\n          _this3.hiddenFileInput.style.height = \"0\";\r\n          _this3.hiddenFileInput.style.width = \"0\";\r\n          document.querySelector(_this3.options.hiddenInputContainer).appendChild(_this3.hiddenFileInput);\r\n          return _this3.hiddenFileInput.addEventListener(\"change\", function () {\r\n            var files = _this3.hiddenFileInput.files;\r\n\r\n            if (files.length) {\r\n              for (var _iterator10 = files, _isArray10 = true, _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _iterator10[Symbol.iterator]();;) {\r\n                var _ref9;\r\n\r\n                if (_isArray10) {\r\n                  if (_i10 >= _iterator10.length) break;\r\n                  _ref9 = _iterator10[_i10++];\r\n                } else {\r\n                  _i10 = _iterator10.next();\r\n                  if (_i10.done) break;\r\n                  _ref9 = _i10.value;\r\n                }\r\n\r\n                var file = _ref9;\r\n\r\n                _this3.addFile(file);\r\n              }\r\n            }\r\n            _this3.emit(\"addedfiles\", files);\r\n            return setupHiddenFileInput();\r\n          });\r\n        };\r\n        setupHiddenFileInput();\r\n      }\r\n\r\n      this.URL = window.URL !== null ? window.URL : window.webkitURL;\r\n\r\n      // Setup all event listeners on the Dropzone object itself.\r\n      // They're not in @setupEventListeners() because they shouldn't be removed\r\n      // again when the dropzone gets disabled.\r\n      for (var _iterator11 = this.events, _isArray11 = true, _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _iterator11[Symbol.iterator]();;) {\r\n        var _ref10;\r\n\r\n        if (_isArray11) {\r\n          if (_i11 >= _iterator11.length) break;\r\n          _ref10 = _iterator11[_i11++];\r\n        } else {\r\n          _i11 = _iterator11.next();\r\n          if (_i11.done) break;\r\n          _ref10 = _i11.value;\r\n        }\r\n\r\n        var eventName = _ref10;\r\n\r\n        this.on(eventName, this.options[eventName]);\r\n      }\r\n\r\n      this.on(\"uploadprogress\", function () {\r\n        return _this3.updateTotalUploadProgress();\r\n      });\r\n\r\n      this.on(\"removedfile\", function () {\r\n        return _this3.updateTotalUploadProgress();\r\n      });\r\n\r\n      this.on(\"canceled\", function (file) {\r\n        return _this3.emit(\"complete\", file);\r\n      });\r\n\r\n      // Emit a `queuecomplete` event if all files finished uploading.\r\n      this.on(\"complete\", function (file) {\r\n        if (_this3.getAddedFiles().length === 0 && _this3.getUploadingFiles().length === 0 && _this3.getQueuedFiles().length === 0) {\r\n          // This needs to be deferred so that `queuecomplete` really triggers after `complete`\r\n          return setTimeout(function () {\r\n            return _this3.emit(\"queuecomplete\");\r\n          }, 0);\r\n        }\r\n      });\r\n\r\n      var noPropagation = function noPropagation(e) {\r\n        e.stopPropagation();\r\n        if (e.preventDefault) {\r\n          return e.preventDefault();\r\n        } else {\r\n          return e.returnValue = false;\r\n        }\r\n      };\r\n\r\n      // Create the listeners\r\n      this.listeners = [{\r\n        element: this.element,\r\n        events: {\r\n          \"dragstart\": function dragstart(e) {\r\n            return _this3.emit(\"dragstart\", e);\r\n          },\r\n          \"dragenter\": function dragenter(e) {\r\n            noPropagation(e);\r\n            return _this3.emit(\"dragenter\", e);\r\n          },\r\n          \"dragover\": function dragover(e) {\r\n            // Makes it possible to drag files from chrome's download bar\r\n            // http://stackoverflow.com/questions/19526430/drag-and-drop-file-uploads-from-chrome-downloads-bar\r\n            // Try is required to prevent bug in Internet Explorer 11 (SCRIPT65535 exception)\r\n            var efct = void 0;\r\n            try {\r\n              efct = e.dataTransfer.effectAllowed;\r\n            } catch (error) {}\r\n            e.dataTransfer.dropEffect = 'move' === efct || 'linkMove' === efct ? 'move' : 'copy';\r\n\r\n            noPropagation(e);\r\n            return _this3.emit(\"dragover\", e);\r\n          },\r\n          \"dragleave\": function dragleave(e) {\r\n            return _this3.emit(\"dragleave\", e);\r\n          },\r\n          \"drop\": function drop(e) {\r\n            noPropagation(e);\r\n            return _this3.drop(e);\r\n          },\r\n          \"dragend\": function dragend(e) {\r\n            return _this3.emit(\"dragend\", e);\r\n          }\r\n\r\n          // This is disabled right now, because the browsers don't implement it properly.\r\n          // \"paste\": (e) =>\r\n          //   noPropagation e\r\n          //   @paste e\r\n        } }];\r\n\r\n      this.clickableElements.forEach(function (clickableElement) {\r\n        return _this3.listeners.push({\r\n          element: clickableElement,\r\n          events: {\r\n            \"click\": function click(evt) {\r\n              // Only the actual dropzone or the message element should trigger file selection\r\n              if (clickableElement !== _this3.element || evt.target === _this3.element || Dropzone.elementInside(evt.target, _this3.element.querySelector(\".dz-message\"))) {\r\n                _this3.hiddenFileInput.click(); // Forward the click\r\n              }\r\n              return true;\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      this.enable();\r\n\r\n      return this.options.init.call(this);\r\n    }\r\n\r\n    // Not fully tested yet\r\n\r\n  }, {\r\n    key: \"destroy\",\r\n    value: function destroy() {\r\n      this.disable();\r\n      this.removeAllFiles(true);\r\n      if (this.hiddenFileInput != null ? this.hiddenFileInput.parentNode : undefined) {\r\n        this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);\r\n        this.hiddenFileInput = null;\r\n      }\r\n      delete this.element.dropzone;\r\n      return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);\r\n    }\r\n  }, {\r\n    key: \"updateTotalUploadProgress\",\r\n    value: function updateTotalUploadProgress() {\r\n      var totalUploadProgress = void 0;\r\n      var totalBytesSent = 0;\r\n      var totalBytes = 0;\r\n\r\n      var activeFiles = this.getActiveFiles();\r\n\r\n      if (activeFiles.length) {\r\n        for (var _iterator12 = this.getActiveFiles(), _isArray12 = true, _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _iterator12[Symbol.iterator]();;) {\r\n          var _ref11;\r\n\r\n          if (_isArray12) {\r\n            if (_i12 >= _iterator12.length) break;\r\n            _ref11 = _iterator12[_i12++];\r\n          } else {\r\n            _i12 = _iterator12.next();\r\n            if (_i12.done) break;\r\n            _ref11 = _i12.value;\r\n          }\r\n\r\n          var file = _ref11;\r\n\r\n          totalBytesSent += file.upload.bytesSent;\r\n          totalBytes += file.upload.total;\r\n        }\r\n        totalUploadProgress = 100 * totalBytesSent / totalBytes;\r\n      } else {\r\n        totalUploadProgress = 100;\r\n      }\r\n\r\n      return this.emit(\"totaluploadprogress\", totalUploadProgress, totalBytes, totalBytesSent);\r\n    }\r\n\r\n    // @options.paramName can be a function taking one parameter rather than a string.\r\n    // A parameter name for a file is obtained simply by calling this with an index number.\r\n\r\n  }, {\r\n    key: \"_getParamName\",\r\n    value: function _getParamName(n) {\r\n      if (typeof this.options.paramName === \"function\") {\r\n        return this.options.paramName(n);\r\n      } else {\r\n        return \"\" + this.options.paramName + (this.options.uploadMultiple ? \"[\" + n + \"]\" : \"\");\r\n      }\r\n    }\r\n\r\n    // If @options.renameFile is a function,\r\n    // the function will be used to rename the file.name before appending it to the formData\r\n\r\n  }, {\r\n    key: \"_renameFile\",\r\n    value: function _renameFile(file) {\r\n      if (typeof this.options.renameFile !== \"function\") {\r\n        return file.name;\r\n      }\r\n      return this.options.renameFile(file);\r\n    }\r\n\r\n    // Returns a form that can be used as fallback if the browser does not support DragnDrop\r\n    //\r\n    // If the dropzone is already a form, only the input field and button are returned. Otherwise a complete form element is provided.\r\n    // This code has to pass in IE7 :(\r\n\r\n  }, {\r\n    key: \"getFallbackForm\",\r\n    value: function getFallbackForm() {\r\n      var existingFallback = void 0,\r\n          form = void 0;\r\n      if (existingFallback = this.getExistingFallback()) {\r\n        return existingFallback;\r\n      }\r\n\r\n      var fieldsString = \"<div class=\\\"dz-fallback\\\">\";\r\n      if (this.options.dictFallbackText) {\r\n        fieldsString += \"<p>\" + this.options.dictFallbackText + \"</p>\";\r\n      }\r\n      fieldsString += \"<input type=\\\"file\\\" name=\\\"\" + this._getParamName(0) + \"\\\" \" + (this.options.uploadMultiple ? 'multiple=\"multiple\"' : undefined) + \" /><input type=\\\"submit\\\" value=\\\"Upload!\\\"></div>\";\r\n\r\n      var fields = Dropzone.createElement(fieldsString);\r\n      if (this.element.tagName !== \"FORM\") {\r\n        form = Dropzone.createElement(\"<form action=\\\"\" + this.options.url + \"\\\" enctype=\\\"multipart/form-data\\\" method=\\\"\" + this.options.method + \"\\\"></form>\");\r\n        form.appendChild(fields);\r\n      } else {\r\n        // Make sure that the enctype and method attributes are set properly\r\n        this.element.setAttribute(\"enctype\", \"multipart/form-data\");\r\n        this.element.setAttribute(\"method\", this.options.method);\r\n      }\r\n      return form != null ? form : fields;\r\n    }\r\n\r\n    // Returns the fallback elements if they exist already\r\n    //\r\n    // This code has to pass in IE7 :(\r\n\r\n  }, {\r\n    key: \"getExistingFallback\",\r\n    value: function getExistingFallback() {\r\n      var getFallback = function getFallback(elements) {\r\n        for (var _iterator13 = elements, _isArray13 = true, _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _iterator13[Symbol.iterator]();;) {\r\n          var _ref12;\r\n\r\n          if (_isArray13) {\r\n            if (_i13 >= _iterator13.length) break;\r\n            _ref12 = _iterator13[_i13++];\r\n          } else {\r\n            _i13 = _iterator13.next();\r\n            if (_i13.done) break;\r\n            _ref12 = _i13.value;\r\n          }\r\n\r\n          var el = _ref12;\r\n\r\n          if (/(^| )fallback($| )/.test(el.className)) {\r\n            return el;\r\n          }\r\n        }\r\n      };\r\n\r\n      var _arr = [\"div\", \"form\"];\r\n      for (var _i14 = 0; _i14 < _arr.length; _i14++) {\r\n        var tagName = _arr[_i14];\r\n        var fallback;\r\n        if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {\r\n          return fallback;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Activates all listeners stored in @listeners\r\n\r\n  }, {\r\n    key: \"setupEventListeners\",\r\n    value: function setupEventListeners() {\r\n      return this.listeners.map(function (elementListeners) {\r\n        return function () {\r\n          var result = [];\r\n          for (var event in elementListeners.events) {\r\n            var listener = elementListeners.events[event];\r\n            result.push(elementListeners.element.addEventListener(event, listener, false));\r\n          }\r\n          return result;\r\n        }();\r\n      });\r\n    }\r\n\r\n    // Deactivates all listeners stored in @listeners\r\n\r\n  }, {\r\n    key: \"removeEventListeners\",\r\n    value: function removeEventListeners() {\r\n      return this.listeners.map(function (elementListeners) {\r\n        return function () {\r\n          var result = [];\r\n          for (var event in elementListeners.events) {\r\n            var listener = elementListeners.events[event];\r\n            result.push(elementListeners.element.removeEventListener(event, listener, false));\r\n          }\r\n          return result;\r\n        }();\r\n      });\r\n    }\r\n\r\n    // Removes all event listeners and cancels all files in the queue or being processed.\r\n\r\n  }, {\r\n    key: \"disable\",\r\n    value: function disable() {\r\n      var _this4 = this;\r\n\r\n      this.clickableElements.forEach(function (element) {\r\n        return element.classList.remove(\"dz-clickable\");\r\n      });\r\n      this.removeEventListeners();\r\n      this.disabled = true;\r\n\r\n      return this.files.map(function (file) {\r\n        return _this4.cancelUpload(file);\r\n      });\r\n    }\r\n  }, {\r\n    key: \"enable\",\r\n    value: function enable() {\r\n      delete this.disabled;\r\n      this.clickableElements.forEach(function (element) {\r\n        return element.classList.add(\"dz-clickable\");\r\n      });\r\n      return this.setupEventListeners();\r\n    }\r\n\r\n    // Returns a nicely formatted filesize\r\n\r\n  }, {\r\n    key: \"filesize\",\r\n    value: function filesize(size) {\r\n      var selectedSize = 0;\r\n      var selectedUnit = \"b\";\r\n\r\n      if (size > 0) {\r\n        var units = ['tb', 'gb', 'mb', 'kb', 'b'];\r\n\r\n        for (var i = 0; i < units.length; i++) {\r\n          var unit = units[i];\r\n          var cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;\r\n\r\n          if (size >= cutoff) {\r\n            selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);\r\n            selectedUnit = unit;\r\n            break;\r\n          }\r\n        }\r\n\r\n        selectedSize = Math.round(10 * selectedSize) / 10; // Cutting of digits\r\n      }\r\n\r\n      return \"<strong>\" + selectedSize + \"</strong> \" + this.options.dictFileSizeUnits[selectedUnit];\r\n    }\r\n\r\n    // Adds or removes the `dz-max-files-reached` class from the form.\r\n\r\n  }, {\r\n    key: \"_updateMaxFilesReachedClass\",\r\n    value: function _updateMaxFilesReachedClass() {\r\n      if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {\r\n        if (this.getAcceptedFiles().length === this.options.maxFiles) {\r\n          this.emit('maxfilesreached', this.files);\r\n        }\r\n        return this.element.classList.add(\"dz-max-files-reached\");\r\n      } else {\r\n        return this.element.classList.remove(\"dz-max-files-reached\");\r\n      }\r\n    }\r\n  }, {\r\n    key: \"drop\",\r\n    value: function drop(e) {\r\n      if (!e.dataTransfer) {\r\n        return;\r\n      }\r\n      this.emit(\"drop\", e);\r\n\r\n      // Convert the FileList to an Array\r\n      // This is necessary for IE11\r\n      var files = [];\r\n      for (var i = 0; i < e.dataTransfer.files.length; i++) {\r\n        files[i] = e.dataTransfer.files[i];\r\n      }\r\n\r\n      this.emit(\"addedfiles\", files);\r\n\r\n      // Even if it's a folder, files.length will contain the folders.\r\n      if (files.length) {\r\n        var items = e.dataTransfer.items;\r\n\r\n        if (items && items.length && items[0].webkitGetAsEntry != null) {\r\n          // The browser supports dropping of folders, so handle items instead of files\r\n          this._addFilesFromItems(items);\r\n        } else {\r\n          this.handleFiles(files);\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    key: \"paste\",\r\n    value: function paste(e) {\r\n      if (__guard__(e != null ? e.clipboardData : undefined, function (x) {\r\n        return x.items;\r\n      }) == null) {\r\n        return;\r\n      }\r\n\r\n      this.emit(\"paste\", e);\r\n      var items = e.clipboardData.items;\r\n\r\n\r\n      if (items.length) {\r\n        return this._addFilesFromItems(items);\r\n      }\r\n    }\r\n  }, {\r\n    key: \"handleFiles\",\r\n    value: function handleFiles(files) {\r\n      for (var _iterator14 = files, _isArray14 = true, _i15 = 0, _iterator14 = _isArray14 ? _iterator14 : _iterator14[Symbol.iterator]();;) {\r\n        var _ref13;\r\n\r\n        if (_isArray14) {\r\n          if (_i15 >= _iterator14.length) break;\r\n          _ref13 = _iterator14[_i15++];\r\n        } else {\r\n          _i15 = _iterator14.next();\r\n          if (_i15.done) break;\r\n          _ref13 = _i15.value;\r\n        }\r\n\r\n        var file = _ref13;\r\n\r\n        this.addFile(file);\r\n      }\r\n    }\r\n\r\n    // When a folder is dropped (or files are pasted), items must be handled\r\n    // instead of files.\r\n\r\n  }, {\r\n    key: \"_addFilesFromItems\",\r\n    value: function _addFilesFromItems(items) {\r\n      var _this5 = this;\r\n\r\n      return function () {\r\n        var result = [];\r\n        for (var _iterator15 = items, _isArray15 = true, _i16 = 0, _iterator15 = _isArray15 ? _iterator15 : _iterator15[Symbol.iterator]();;) {\r\n          var _ref14;\r\n\r\n          if (_isArray15) {\r\n            if (_i16 >= _iterator15.length) break;\r\n            _ref14 = _iterator15[_i16++];\r\n          } else {\r\n            _i16 = _iterator15.next();\r\n            if (_i16.done) break;\r\n            _ref14 = _i16.value;\r\n          }\r\n\r\n          var item = _ref14;\r\n\r\n          var entry;\r\n          if (item.webkitGetAsEntry != null && (entry = item.webkitGetAsEntry())) {\r\n            if (entry.isFile) {\r\n              result.push(_this5.addFile(item.getAsFile()));\r\n            } else if (entry.isDirectory) {\r\n              // Append all files from that directory to files\r\n              result.push(_this5._addFilesFromDirectory(entry, entry.name));\r\n            } else {\r\n              result.push(undefined);\r\n            }\r\n          } else if (item.getAsFile != null) {\r\n            if (item.kind == null || item.kind === \"file\") {\r\n              result.push(_this5.addFile(item.getAsFile()));\r\n            } else {\r\n              result.push(undefined);\r\n            }\r\n          } else {\r\n            result.push(undefined);\r\n          }\r\n        }\r\n        return result;\r\n      }();\r\n    }\r\n\r\n    // Goes through the directory, and adds each file it finds recursively\r\n\r\n  }, {\r\n    key: \"_addFilesFromDirectory\",\r\n    value: function _addFilesFromDirectory(directory, path) {\r\n      var _this6 = this;\r\n\r\n      var dirReader = directory.createReader();\r\n\r\n      var errorHandler = function errorHandler(error) {\r\n        return __guardMethod__(console, 'log', function (o) {\r\n          return o.log(error);\r\n        });\r\n      };\r\n\r\n      var readEntries = function readEntries() {\r\n        return dirReader.readEntries(function (entries) {\r\n          if (entries.length > 0) {\r\n            for (var _iterator16 = entries, _isArray16 = true, _i17 = 0, _iterator16 = _isArray16 ? _iterator16 : _iterator16[Symbol.iterator]();;) {\r\n              var _ref15;\r\n\r\n              if (_isArray16) {\r\n                if (_i17 >= _iterator16.length) break;\r\n                _ref15 = _iterator16[_i17++];\r\n              } else {\r\n                _i17 = _iterator16.next();\r\n                if (_i17.done) break;\r\n                _ref15 = _i17.value;\r\n              }\r\n\r\n              var entry = _ref15;\r\n\r\n              if (entry.isFile) {\r\n                entry.file(function (file) {\r\n                  if (_this6.options.ignoreHiddenFiles && file.name.substring(0, 1) === '.') {\r\n                    return;\r\n                  }\r\n                  file.fullPath = path + \"/\" + file.name;\r\n                  return _this6.addFile(file);\r\n                });\r\n              } else if (entry.isDirectory) {\r\n                _this6._addFilesFromDirectory(entry, path + \"/\" + entry.name);\r\n              }\r\n            }\r\n\r\n            // Recursively call readEntries() again, since browser only handle\r\n            // the first 100 entries.\r\n            // See: https://developer.mozilla.org/en-US/docs/Web/API/DirectoryReader#readEntries\r\n            readEntries();\r\n          }\r\n          return null;\r\n        }, errorHandler);\r\n      };\r\n\r\n      return readEntries();\r\n    }\r\n\r\n    // If `done()` is called without argument the file is accepted\r\n    // If you call it with an error message, the file is rejected\r\n    // (This allows for asynchronous validation)\r\n    //\r\n    // This function checks the filesize, and if the file.type passes the\r\n    // `acceptedFiles` check.\r\n\r\n  }, {\r\n    key: \"accept\",\r\n    value: function accept(file, done) {\r\n      if (file.size > this.options.maxFilesize * 1024 * 1024) {\r\n        return done(this.options.dictFileTooBig.replace(\"{{filesize}}\", Math.round(file.size / 1024 / 10.24) / 100).replace(\"{{maxFilesize}}\", this.options.maxFilesize));\r\n      } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {\r\n        return done(this.options.dictInvalidFileType);\r\n      } else if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {\r\n        done(this.options.dictMaxFilesExceeded.replace(\"{{maxFiles}}\", this.options.maxFiles));\r\n        return this.emit(\"maxfilesexceeded\", file);\r\n      } else {\r\n        return this.options.accept.call(this, file, done);\r\n      }\r\n    }\r\n  }, {\r\n    key: \"addFile\",\r\n    value: function addFile(file) {\r\n      var _this7 = this;\r\n\r\n      file.upload = {\r\n        uuid: Dropzone.uuidv4(),\r\n        progress: 0,\r\n        // Setting the total upload size to file.size for the beginning\r\n        // It's actual different than the size to be transmitted.\r\n        total: file.size,\r\n        bytesSent: 0,\r\n        filename: this._renameFile(file),\r\n        chunked: this.options.chunking && (this.options.forceChunking || file.size > this.options.chunkSize),\r\n        totalChunkCount: Math.ceil(file.size / this.options.chunkSize)\r\n      };\r\n      this.files.push(file);\r\n\r\n      file.status = Dropzone.ADDED;\r\n\r\n      this.emit(\"addedfile\", file);\r\n\r\n      this._enqueueThumbnail(file);\r\n\r\n      return this.accept(file, function (error) {\r\n        if (error) {\r\n          file.accepted = false;\r\n          _this7._errorProcessing([file], error); // Will set the file.status\r\n        } else {\r\n          file.accepted = true;\r\n          if (_this7.options.autoQueue) {\r\n            _this7.enqueueFile(file);\r\n          } // Will set .accepted = true\r\n        }\r\n        return _this7._updateMaxFilesReachedClass();\r\n      });\r\n    }\r\n\r\n    // Wrapper for enqueueFile\r\n\r\n  }, {\r\n    key: \"enqueueFiles\",\r\n    value: function enqueueFiles(files) {\r\n      for (var _iterator17 = files, _isArray17 = true, _i18 = 0, _iterator17 = _isArray17 ? _iterator17 : _iterator17[Symbol.iterator]();;) {\r\n        var _ref16;\r\n\r\n        if (_isArray17) {\r\n          if (_i18 >= _iterator17.length) break;\r\n          _ref16 = _iterator17[_i18++];\r\n        } else {\r\n          _i18 = _iterator17.next();\r\n          if (_i18.done) break;\r\n          _ref16 = _i18.value;\r\n        }\r\n\r\n        var file = _ref16;\r\n\r\n        this.enqueueFile(file);\r\n      }\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"enqueueFile\",\r\n    value: function enqueueFile(file) {\r\n      var _this8 = this;\r\n\r\n      if (file.status === Dropzone.ADDED && file.accepted === true) {\r\n        file.status = Dropzone.QUEUED;\r\n        if (this.options.autoProcessQueue) {\r\n          return setTimeout(function () {\r\n            return _this8.processQueue();\r\n          }, 0); // Deferring the call\r\n        }\r\n      } else {\r\n        throw new Error(\"This file can't be queued because it has already been processed or was rejected.\");\r\n      }\r\n    }\r\n  }, {\r\n    key: \"_enqueueThumbnail\",\r\n    value: function _enqueueThumbnail(file) {\r\n      var _this9 = this;\r\n\r\n      if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {\r\n        this._thumbnailQueue.push(file);\r\n        return setTimeout(function () {\r\n          return _this9._processThumbnailQueue();\r\n        }, 0); // Deferring the call\r\n      }\r\n    }\r\n  }, {\r\n    key: \"_processThumbnailQueue\",\r\n    value: function _processThumbnailQueue() {\r\n      var _this10 = this;\r\n\r\n      if (this._processingThumbnail || this._thumbnailQueue.length === 0) {\r\n        return;\r\n      }\r\n\r\n      this._processingThumbnail = true;\r\n      var file = this._thumbnailQueue.shift();\r\n      return this.createThumbnail(file, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, true, function (dataUrl) {\r\n        _this10.emit(\"thumbnail\", file, dataUrl);\r\n        _this10._processingThumbnail = false;\r\n        return _this10._processThumbnailQueue();\r\n      });\r\n    }\r\n\r\n    // Can be called by the user to remove a file\r\n\r\n  }, {\r\n    key: \"removeFile\",\r\n    value: function removeFile(file) {\r\n      if (file.status === Dropzone.UPLOADING) {\r\n        this.cancelUpload(file);\r\n      }\r\n      this.files = without(this.files, file);\r\n\r\n      this.emit(\"removedfile\", file);\r\n      if (this.files.length === 0) {\r\n        return this.emit(\"reset\");\r\n      }\r\n    }\r\n\r\n    // Removes all files that aren't currently processed from the list\r\n\r\n  }, {\r\n    key: \"removeAllFiles\",\r\n    value: function removeAllFiles(cancelIfNecessary) {\r\n      // Create a copy of files since removeFile() changes the @files array.\r\n      if (cancelIfNecessary == null) {\r\n        cancelIfNecessary = false;\r\n      }\r\n      for (var _iterator18 = this.files.slice(), _isArray18 = true, _i19 = 0, _iterator18 = _isArray18 ? _iterator18 : _iterator18[Symbol.iterator]();;) {\r\n        var _ref17;\r\n\r\n        if (_isArray18) {\r\n          if (_i19 >= _iterator18.length) break;\r\n          _ref17 = _iterator18[_i19++];\r\n        } else {\r\n          _i19 = _iterator18.next();\r\n          if (_i19.done) break;\r\n          _ref17 = _i19.value;\r\n        }\r\n\r\n        var file = _ref17;\r\n\r\n        if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {\r\n          this.removeFile(file);\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    // Resizes an image before it gets sent to the server. This function is the default behavior of\r\n    // `options.transformFile` if `resizeWidth` or `resizeHeight` are set. The callback is invoked with\r\n    // the resized blob.\r\n\r\n  }, {\r\n    key: \"resizeImage\",\r\n    value: function resizeImage(file, width, height, resizeMethod, callback) {\r\n      var _this11 = this;\r\n\r\n      return this.createThumbnail(file, width, height, resizeMethod, false, function (dataUrl, canvas) {\r\n        if (canvas == null) {\r\n          // The image has not been resized\r\n          return callback(file);\r\n        } else {\r\n          var resizeMimeType = _this11.options.resizeMimeType;\r\n\r\n          if (resizeMimeType == null) {\r\n            resizeMimeType = file.type;\r\n          }\r\n          var resizedDataURL = canvas.toDataURL(resizeMimeType, _this11.options.resizeQuality);\r\n          if (resizeMimeType === 'image/jpeg' || resizeMimeType === 'image/jpg') {\r\n            // Now add the original EXIF information\r\n            resizedDataURL = ExifRestore.restore(file.dataURL, resizedDataURL);\r\n          }\r\n          return callback(Dropzone.dataURItoBlob(resizedDataURL));\r\n        }\r\n      });\r\n    }\r\n  }, {\r\n    key: \"createThumbnail\",\r\n    value: function createThumbnail(file, width, height, resizeMethod, fixOrientation, callback) {\r\n      var _this12 = this;\r\n\r\n      var fileReader = new FileReader();\r\n\r\n      fileReader.onload = function () {\r\n\r\n        file.dataURL = fileReader.result;\r\n\r\n        // Don't bother creating a thumbnail for SVG images since they're vector\r\n        if (file.type === \"image/svg+xml\") {\r\n          if (callback != null) {\r\n            callback(fileReader.result);\r\n          }\r\n          return;\r\n        }\r\n\r\n        return _this12.createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback);\r\n      };\r\n\r\n      return fileReader.readAsDataURL(file);\r\n    }\r\n  }, {\r\n    key: \"createThumbnailFromUrl\",\r\n    value: function createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback, crossOrigin) {\r\n      var _this13 = this;\r\n\r\n      // Not using `new Image` here because of a bug in latest Chrome versions.\r\n      // See https://github.com/enyo/dropzone/pull/226\r\n      var img = document.createElement(\"img\");\r\n\r\n      if (crossOrigin) {\r\n        img.crossOrigin = crossOrigin;\r\n      }\r\n\r\n      img.onload = function () {\r\n        var loadExif = function loadExif(callback) {\r\n          return callback(1);\r\n        };\r\n        if (typeof EXIF !== 'undefined' && EXIF !== null && fixOrientation) {\r\n          loadExif = function loadExif(callback) {\r\n            return EXIF.getData(img, function () {\r\n              return callback(EXIF.getTag(this, 'Orientation'));\r\n            });\r\n          };\r\n        }\r\n\r\n        return loadExif(function (orientation) {\r\n          file.width = img.width;\r\n          file.height = img.height;\r\n\r\n          var resizeInfo = _this13.options.resize.call(_this13, file, width, height, resizeMethod);\r\n\r\n          var canvas = document.createElement(\"canvas\");\r\n          var ctx = canvas.getContext(\"2d\");\r\n\r\n          canvas.width = resizeInfo.trgWidth;\r\n          canvas.height = resizeInfo.trgHeight;\r\n\r\n          if (orientation > 4) {\r\n            canvas.width = resizeInfo.trgHeight;\r\n            canvas.height = resizeInfo.trgWidth;\r\n          }\r\n\r\n          switch (orientation) {\r\n            case 2:\r\n              // horizontal flip\r\n              ctx.translate(canvas.width, 0);\r\n              ctx.scale(-1, 1);\r\n              break;\r\n            case 3:\r\n              // 180° rotate left\r\n              ctx.translate(canvas.width, canvas.height);\r\n              ctx.rotate(Math.PI);\r\n              break;\r\n            case 4:\r\n              // vertical flip\r\n              ctx.translate(0, canvas.height);\r\n              ctx.scale(1, -1);\r\n              break;\r\n            case 5:\r\n              // vertical flip + 90 rotate right\r\n              ctx.rotate(0.5 * Math.PI);\r\n              ctx.scale(1, -1);\r\n              break;\r\n            case 6:\r\n              // 90° rotate right\r\n              ctx.rotate(0.5 * Math.PI);\r\n              ctx.translate(0, -canvas.height);\r\n              break;\r\n            case 7:\r\n              // horizontal flip + 90 rotate right\r\n              ctx.rotate(0.5 * Math.PI);\r\n              ctx.translate(canvas.width, -canvas.height);\r\n              ctx.scale(-1, 1);\r\n              break;\r\n            case 8:\r\n              // 90° rotate left\r\n              ctx.rotate(-0.5 * Math.PI);\r\n              ctx.translate(-canvas.width, 0);\r\n              break;\r\n          }\r\n\r\n          // This is a bugfix for iOS' scaling bug.\r\n          drawImageIOSFix(ctx, img, resizeInfo.srcX != null ? resizeInfo.srcX : 0, resizeInfo.srcY != null ? resizeInfo.srcY : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, resizeInfo.trgX != null ? resizeInfo.trgX : 0, resizeInfo.trgY != null ? resizeInfo.trgY : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);\r\n\r\n          var thumbnail = canvas.toDataURL(\"image/png\");\r\n\r\n          if (callback != null) {\r\n            return callback(thumbnail, canvas);\r\n          }\r\n        });\r\n      };\r\n\r\n      if (callback != null) {\r\n        img.onerror = callback;\r\n      }\r\n\r\n      return img.src = file.dataURL;\r\n    }\r\n\r\n    // Goes through the queue and processes files if there aren't too many already.\r\n\r\n  }, {\r\n    key: \"processQueue\",\r\n    value: function processQueue() {\r\n      var parallelUploads = this.options.parallelUploads;\r\n\r\n      var processingLength = this.getUploadingFiles().length;\r\n      var i = processingLength;\r\n\r\n      // There are already at least as many files uploading than should be\r\n      if (processingLength >= parallelUploads) {\r\n        return;\r\n      }\r\n\r\n      var queuedFiles = this.getQueuedFiles();\r\n\r\n      if (!(queuedFiles.length > 0)) {\r\n        return;\r\n      }\r\n\r\n      if (this.options.uploadMultiple) {\r\n        // The files should be uploaded in one request\r\n        return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));\r\n      } else {\r\n        while (i < parallelUploads) {\r\n          if (!queuedFiles.length) {\r\n            return;\r\n          } // Nothing left to process\r\n          this.processFile(queuedFiles.shift());\r\n          i++;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Wrapper for `processFiles`\r\n\r\n  }, {\r\n    key: \"processFile\",\r\n    value: function processFile(file) {\r\n      return this.processFiles([file]);\r\n    }\r\n\r\n    // Loads the file, then calls finishedLoading()\r\n\r\n  }, {\r\n    key: \"processFiles\",\r\n    value: function processFiles(files) {\r\n      for (var _iterator19 = files, _isArray19 = true, _i20 = 0, _iterator19 = _isArray19 ? _iterator19 : _iterator19[Symbol.iterator]();;) {\r\n        var _ref18;\r\n\r\n        if (_isArray19) {\r\n          if (_i20 >= _iterator19.length) break;\r\n          _ref18 = _iterator19[_i20++];\r\n        } else {\r\n          _i20 = _iterator19.next();\r\n          if (_i20.done) break;\r\n          _ref18 = _i20.value;\r\n        }\r\n\r\n        var file = _ref18;\r\n\r\n        file.processing = true; // Backwards compatibility\r\n        file.status = Dropzone.UPLOADING;\r\n\r\n        this.emit(\"processing\", file);\r\n      }\r\n\r\n      if (this.options.uploadMultiple) {\r\n        this.emit(\"processingmultiple\", files);\r\n      }\r\n\r\n      return this.uploadFiles(files);\r\n    }\r\n  }, {\r\n    key: \"_getFilesWithXhr\",\r\n    value: function _getFilesWithXhr(xhr) {\r\n      var files = void 0;\r\n      return files = this.files.filter(function (file) {\r\n        return file.xhr === xhr;\r\n      }).map(function (file) {\r\n        return file;\r\n      });\r\n    }\r\n\r\n    // Cancels the file upload and sets the status to CANCELED\r\n    // **if** the file is actually being uploaded.\r\n    // If it's still in the queue, the file is being removed from it and the status\r\n    // set to CANCELED.\r\n\r\n  }, {\r\n    key: \"cancelUpload\",\r\n    value: function cancelUpload(file) {\r\n      if (file.status === Dropzone.UPLOADING) {\r\n        var groupedFiles = this._getFilesWithXhr(file.xhr);\r\n        for (var _iterator20 = groupedFiles, _isArray20 = true, _i21 = 0, _iterator20 = _isArray20 ? _iterator20 : _iterator20[Symbol.iterator]();;) {\r\n          var _ref19;\r\n\r\n          if (_isArray20) {\r\n            if (_i21 >= _iterator20.length) break;\r\n            _ref19 = _iterator20[_i21++];\r\n          } else {\r\n            _i21 = _iterator20.next();\r\n            if (_i21.done) break;\r\n            _ref19 = _i21.value;\r\n          }\r\n\r\n          var groupedFile = _ref19;\r\n\r\n          groupedFile.status = Dropzone.CANCELED;\r\n        }\r\n        if (typeof file.xhr !== 'undefined') {\r\n          file.xhr.abort();\r\n        }\r\n        for (var _iterator21 = groupedFiles, _isArray21 = true, _i22 = 0, _iterator21 = _isArray21 ? _iterator21 : _iterator21[Symbol.iterator]();;) {\r\n          var _ref20;\r\n\r\n          if (_isArray21) {\r\n            if (_i22 >= _iterator21.length) break;\r\n            _ref20 = _iterator21[_i22++];\r\n          } else {\r\n            _i22 = _iterator21.next();\r\n            if (_i22.done) break;\r\n            _ref20 = _i22.value;\r\n          }\r\n\r\n          var _groupedFile = _ref20;\r\n\r\n          this.emit(\"canceled\", _groupedFile);\r\n        }\r\n        if (this.options.uploadMultiple) {\r\n          this.emit(\"canceledmultiple\", groupedFiles);\r\n        }\r\n      } else if (file.status === Dropzone.ADDED || file.status === Dropzone.QUEUED) {\r\n        file.status = Dropzone.CANCELED;\r\n        this.emit(\"canceled\", file);\r\n        if (this.options.uploadMultiple) {\r\n          this.emit(\"canceledmultiple\", [file]);\r\n        }\r\n      }\r\n\r\n      if (this.options.autoProcessQueue) {\r\n        return this.processQueue();\r\n      }\r\n    }\r\n  }, {\r\n    key: \"resolveOption\",\r\n    value: function resolveOption(option) {\r\n      if (typeof option === 'function') {\r\n        for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\r\n          args[_key3 - 1] = arguments[_key3];\r\n        }\r\n\r\n        return option.apply(this, args);\r\n      }\r\n      return option;\r\n    }\r\n  }, {\r\n    key: \"uploadFile\",\r\n    value: function uploadFile(file) {\r\n      return this.uploadFiles([file]);\r\n    }\r\n  }, {\r\n    key: \"uploadFiles\",\r\n    value: function uploadFiles(files) {\r\n      var _this14 = this;\r\n\r\n      this._transformFiles(files, function (transformedFiles) {\r\n        if (files[0].upload.chunked) {\r\n          // This file should be sent in chunks!\r\n\r\n          // If the chunking option is set, we **know** that there can only be **one** file, since\r\n          // uploadMultiple is not allowed with this option.\r\n          var file = files[0];\r\n          var transformedFile = transformedFiles[0];\r\n          var startedChunkCount = 0;\r\n\r\n          file.upload.chunks = [];\r\n\r\n          var handleNextChunk = function handleNextChunk() {\r\n            var chunkIndex = 0;\r\n\r\n            // Find the next item in file.upload.chunks that is not defined yet.\r\n            while (file.upload.chunks[chunkIndex] !== undefined) {\r\n              chunkIndex++;\r\n            }\r\n\r\n            // This means, that all chunks have already been started.\r\n            if (chunkIndex >= file.upload.totalChunkCount) return;\r\n\r\n            startedChunkCount++;\r\n\r\n            var start = chunkIndex * _this14.options.chunkSize;\r\n            var end = Math.min(start + _this14.options.chunkSize, file.size);\r\n\r\n            var dataBlock = {\r\n              name: _this14._getParamName(0),\r\n              data: transformedFile.webkitSlice ? transformedFile.webkitSlice(start, end) : transformedFile.slice(start, end),\r\n              filename: file.upload.filename,\r\n              chunkIndex: chunkIndex\r\n            };\r\n\r\n            file.upload.chunks[chunkIndex] = {\r\n              file: file,\r\n              index: chunkIndex,\r\n              dataBlock: dataBlock, // In case we want to retry.\r\n              status: Dropzone.UPLOADING,\r\n              progress: 0,\r\n              retries: 0 // The number of times this block has been retried.\r\n            };\r\n\r\n            _this14._uploadData(files, [dataBlock]);\r\n          };\r\n\r\n          file.upload.finishedChunkUpload = function (chunk) {\r\n            var allFinished = true;\r\n            chunk.status = Dropzone.SUCCESS;\r\n\r\n            // Clear the data from the chunk\r\n            chunk.dataBlock = null;\r\n\r\n            for (var i = 0; i < file.upload.totalChunkCount; i++) {\r\n              if (file.upload.chunks[i] === undefined) {\r\n                return handleNextChunk();\r\n              }\r\n              if (file.upload.chunks[i].status !== Dropzone.SUCCESS) {\r\n                allFinished = false;\r\n              }\r\n            }\r\n\r\n            if (allFinished) {\r\n              _this14.options.chunksUploaded(file, function () {\r\n                _this14._finished(files, '', null);\r\n              });\r\n            }\r\n          };\r\n\r\n          if (_this14.options.parallelChunkUploads) {\r\n            for (var i = 0; i < file.upload.totalChunkCount; i++) {\r\n              handleNextChunk();\r\n            }\r\n          } else {\r\n            handleNextChunk();\r\n          }\r\n        } else {\r\n          var dataBlocks = [];\r\n          for (var _i23 = 0; _i23 < files.length; _i23++) {\r\n            dataBlocks[_i23] = {\r\n              name: _this14._getParamName(_i23),\r\n              data: transformedFiles[_i23],\r\n              filename: files[_i23].upload.filename\r\n            };\r\n          }\r\n          _this14._uploadData(files, dataBlocks);\r\n        }\r\n      });\r\n    }\r\n\r\n    /// Returns the right chunk for given file and xhr\r\n\r\n  }, {\r\n    key: \"_getChunk\",\r\n    value: function _getChunk(file, xhr) {\r\n      for (var i = 0; i < file.upload.totalChunkCount; i++) {\r\n        if (file.upload.chunks[i] !== undefined && file.upload.chunks[i].xhr === xhr) {\r\n          return file.upload.chunks[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    // This function actually uploads the file(s) to the server.\r\n    // If dataBlocks contains the actual data to upload (meaning, that this could either be transformed\r\n    // files, or individual chunks for chunked upload).\r\n\r\n  }, {\r\n    key: \"_uploadData\",\r\n    value: function _uploadData(files, dataBlocks) {\r\n      var _this15 = this;\r\n\r\n      var xhr = new XMLHttpRequest();\r\n\r\n      // Put the xhr object in the file objects to be able to reference it later.\r\n      for (var _iterator22 = files, _isArray22 = true, _i24 = 0, _iterator22 = _isArray22 ? _iterator22 : _iterator22[Symbol.iterator]();;) {\r\n        var _ref21;\r\n\r\n        if (_isArray22) {\r\n          if (_i24 >= _iterator22.length) break;\r\n          _ref21 = _iterator22[_i24++];\r\n        } else {\r\n          _i24 = _iterator22.next();\r\n          if (_i24.done) break;\r\n          _ref21 = _i24.value;\r\n        }\r\n\r\n        var file = _ref21;\r\n\r\n        file.xhr = xhr;\r\n      }\r\n      if (files[0].upload.chunked) {\r\n        // Put the xhr object in the right chunk object, so it can be associated later, and found with _getChunk\r\n        files[0].upload.chunks[dataBlocks[0].chunkIndex].xhr = xhr;\r\n      }\r\n\r\n      var method = this.resolveOption(this.options.method, files);\r\n      var url = this.resolveOption(this.options.url, files);\r\n      xhr.open(method, url, true);\r\n\r\n      // Setting the timeout after open because of IE11 issue: https://gitlab.com/meno/dropzone/issues/8\r\n      xhr.timeout = this.resolveOption(this.options.timeout, files);\r\n\r\n      // Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179\r\n      xhr.withCredentials = !!this.options.withCredentials;\r\n\r\n      xhr.onload = function (e) {\r\n        _this15._finishedUploading(files, xhr, e);\r\n      };\r\n\r\n      xhr.onerror = function () {\r\n        _this15._handleUploadError(files, xhr);\r\n      };\r\n\r\n      // Some browsers do not have the .upload property\r\n      var progressObj = xhr.upload != null ? xhr.upload : xhr;\r\n      progressObj.onprogress = function (e) {\r\n        return _this15._updateFilesUploadProgress(files, xhr, e);\r\n      };\r\n\r\n      var headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Cache-Control\": \"no-cache\",\r\n        \"X-Requested-With\": \"XMLHttpRequest\"\r\n      };\r\n\r\n      if (this.options.headers) {\r\n        Dropzone.extend(headers, this.options.headers);\r\n      }\r\n\r\n      for (var headerName in headers) {\r\n        var headerValue = headers[headerName];\r\n        if (headerValue) {\r\n          xhr.setRequestHeader(headerName, headerValue);\r\n        }\r\n      }\r\n\r\n      var formData = new FormData();\r\n\r\n      // Adding all @options parameters\r\n      if (this.options.params) {\r\n        var additionalParams = this.options.params;\r\n        if (typeof additionalParams === 'function') {\r\n          additionalParams = additionalParams.call(this, files, xhr, files[0].upload.chunked ? this._getChunk(files[0], xhr) : null);\r\n        }\r\n\r\n        for (var key in additionalParams) {\r\n          var value = additionalParams[key];\r\n          formData.append(key, value);\r\n        }\r\n      }\r\n\r\n      // Let the user add additional data if necessary\r\n      for (var _iterator23 = files, _isArray23 = true, _i25 = 0, _iterator23 = _isArray23 ? _iterator23 : _iterator23[Symbol.iterator]();;) {\r\n        var _ref22;\r\n\r\n        if (_isArray23) {\r\n          if (_i25 >= _iterator23.length) break;\r\n          _ref22 = _iterator23[_i25++];\r\n        } else {\r\n          _i25 = _iterator23.next();\r\n          if (_i25.done) break;\r\n          _ref22 = _i25.value;\r\n        }\r\n\r\n        var _file = _ref22;\r\n\r\n        this.emit(\"sending\", _file, xhr, formData);\r\n      }\r\n      if (this.options.uploadMultiple) {\r\n        this.emit(\"sendingmultiple\", files, xhr, formData);\r\n      }\r\n\r\n      this._addFormElementData(formData);\r\n\r\n      // Finally add the files\r\n      // Has to be last because some servers (eg: S3) expect the file to be the last parameter\r\n      for (var i = 0; i < dataBlocks.length; i++) {\r\n        var dataBlock = dataBlocks[i];\r\n        formData.append(dataBlock.name, dataBlock.data, dataBlock.filename);\r\n      }\r\n\r\n      this.submitRequest(xhr, formData, files);\r\n    }\r\n\r\n    // Transforms all files with this.options.transformFile and invokes done with the transformed files when done.\r\n\r\n  }, {\r\n    key: \"_transformFiles\",\r\n    value: function _transformFiles(files, done) {\r\n      var _this16 = this;\r\n\r\n      var transformedFiles = [];\r\n      // Clumsy way of handling asynchronous calls, until I get to add a proper Future library.\r\n      var doneCounter = 0;\r\n\r\n      var _loop = function _loop(i) {\r\n        _this16.options.transformFile.call(_this16, files[i], function (transformedFile) {\r\n          transformedFiles[i] = transformedFile;\r\n          if (++doneCounter === files.length) {\r\n            done(transformedFiles);\r\n          }\r\n        });\r\n      };\r\n\r\n      for (var i = 0; i < files.length; i++) {\r\n        _loop(i);\r\n      }\r\n    }\r\n\r\n    // Takes care of adding other input elements of the form to the AJAX request\r\n\r\n  }, {\r\n    key: \"_addFormElementData\",\r\n    value: function _addFormElementData(formData) {\r\n      // Take care of other input elements\r\n      if (this.element.tagName === \"FORM\") {\r\n        for (var _iterator24 = this.element.querySelectorAll(\"input, textarea, select, button\"), _isArray24 = true, _i26 = 0, _iterator24 = _isArray24 ? _iterator24 : _iterator24[Symbol.iterator]();;) {\r\n          var _ref23;\r\n\r\n          if (_isArray24) {\r\n            if (_i26 >= _iterator24.length) break;\r\n            _ref23 = _iterator24[_i26++];\r\n          } else {\r\n            _i26 = _iterator24.next();\r\n            if (_i26.done) break;\r\n            _ref23 = _i26.value;\r\n          }\r\n\r\n          var input = _ref23;\r\n\r\n          var inputName = input.getAttribute(\"name\");\r\n          var inputType = input.getAttribute(\"type\");\r\n          if (inputType) inputType = inputType.toLowerCase();\r\n\r\n          // If the input doesn't have a name, we can't use it.\r\n          if (typeof inputName === 'undefined' || inputName === null) continue;\r\n\r\n          if (input.tagName === \"SELECT\" && input.hasAttribute(\"multiple\")) {\r\n            // Possibly multiple values\r\n            for (var _iterator25 = input.options, _isArray25 = true, _i27 = 0, _iterator25 = _isArray25 ? _iterator25 : _iterator25[Symbol.iterator]();;) {\r\n              var _ref24;\r\n\r\n              if (_isArray25) {\r\n                if (_i27 >= _iterator25.length) break;\r\n                _ref24 = _iterator25[_i27++];\r\n              } else {\r\n                _i27 = _iterator25.next();\r\n                if (_i27.done) break;\r\n                _ref24 = _i27.value;\r\n              }\r\n\r\n              var option = _ref24;\r\n\r\n              if (option.selected) {\r\n                formData.append(inputName, option.value);\r\n              }\r\n            }\r\n          } else if (!inputType || inputType !== \"checkbox\" && inputType !== \"radio\" || input.checked) {\r\n            formData.append(inputName, input.value);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Invoked when there is new progress information about given files.\r\n    // If e is not provided, it is assumed that the upload is finished.\r\n\r\n  }, {\r\n    key: \"_updateFilesUploadProgress\",\r\n    value: function _updateFilesUploadProgress(files, xhr, e) {\r\n      var progress = void 0;\r\n      if (typeof e !== 'undefined') {\r\n        progress = 100 * e.loaded / e.total;\r\n\r\n        if (files[0].upload.chunked) {\r\n          var file = files[0];\r\n          // Since this is a chunked upload, we need to update the appropriate chunk progress.\r\n          var chunk = this._getChunk(file, xhr);\r\n          chunk.progress = progress;\r\n          chunk.total = e.total;\r\n          chunk.bytesSent = e.loaded;\r\n          var fileProgress = 0,\r\n              fileTotal = void 0,\r\n              fileBytesSent = void 0;\r\n          file.upload.progress = 0;\r\n          file.upload.total = 0;\r\n          file.upload.bytesSent = 0;\r\n          for (var i = 0; i < file.upload.totalChunkCount; i++) {\r\n            if (file.upload.chunks[i] !== undefined && file.upload.chunks[i].progress !== undefined) {\r\n              file.upload.progress += file.upload.chunks[i].progress;\r\n              file.upload.total += file.upload.chunks[i].total;\r\n              file.upload.bytesSent += file.upload.chunks[i].bytesSent;\r\n            }\r\n          }\r\n          file.upload.progress = file.upload.progress / file.upload.totalChunkCount;\r\n        } else {\r\n          for (var _iterator26 = files, _isArray26 = true, _i28 = 0, _iterator26 = _isArray26 ? _iterator26 : _iterator26[Symbol.iterator]();;) {\r\n            var _ref25;\r\n\r\n            if (_isArray26) {\r\n              if (_i28 >= _iterator26.length) break;\r\n              _ref25 = _iterator26[_i28++];\r\n            } else {\r\n              _i28 = _iterator26.next();\r\n              if (_i28.done) break;\r\n              _ref25 = _i28.value;\r\n            }\r\n\r\n            var _file2 = _ref25;\r\n\r\n            _file2.upload.progress = progress;\r\n            _file2.upload.total = e.total;\r\n            _file2.upload.bytesSent = e.loaded;\r\n          }\r\n        }\r\n        for (var _iterator27 = files, _isArray27 = true, _i29 = 0, _iterator27 = _isArray27 ? _iterator27 : _iterator27[Symbol.iterator]();;) {\r\n          var _ref26;\r\n\r\n          if (_isArray27) {\r\n            if (_i29 >= _iterator27.length) break;\r\n            _ref26 = _iterator27[_i29++];\r\n          } else {\r\n            _i29 = _iterator27.next();\r\n            if (_i29.done) break;\r\n            _ref26 = _i29.value;\r\n          }\r\n\r\n          var _file3 = _ref26;\r\n\r\n          this.emit(\"uploadprogress\", _file3, _file3.upload.progress, _file3.upload.bytesSent);\r\n        }\r\n      } else {\r\n        // Called when the file finished uploading\r\n\r\n        var allFilesFinished = true;\r\n\r\n        progress = 100;\r\n\r\n        for (var _iterator28 = files, _isArray28 = true, _i30 = 0, _iterator28 = _isArray28 ? _iterator28 : _iterator28[Symbol.iterator]();;) {\r\n          var _ref27;\r\n\r\n          if (_isArray28) {\r\n            if (_i30 >= _iterator28.length) break;\r\n            _ref27 = _iterator28[_i30++];\r\n          } else {\r\n            _i30 = _iterator28.next();\r\n            if (_i30.done) break;\r\n            _ref27 = _i30.value;\r\n          }\r\n\r\n          var _file4 = _ref27;\r\n\r\n          if (_file4.upload.progress !== 100 || _file4.upload.bytesSent !== _file4.upload.total) {\r\n            allFilesFinished = false;\r\n          }\r\n          _file4.upload.progress = progress;\r\n          _file4.upload.bytesSent = _file4.upload.total;\r\n        }\r\n\r\n        // Nothing to do, all files already at 100%\r\n        if (allFilesFinished) {\r\n          return;\r\n        }\r\n\r\n        for (var _iterator29 = files, _isArray29 = true, _i31 = 0, _iterator29 = _isArray29 ? _iterator29 : _iterator29[Symbol.iterator]();;) {\r\n          var _ref28;\r\n\r\n          if (_isArray29) {\r\n            if (_i31 >= _iterator29.length) break;\r\n            _ref28 = _iterator29[_i31++];\r\n          } else {\r\n            _i31 = _iterator29.next();\r\n            if (_i31.done) break;\r\n            _ref28 = _i31.value;\r\n          }\r\n\r\n          var _file5 = _ref28;\r\n\r\n          this.emit(\"uploadprogress\", _file5, progress, _file5.upload.bytesSent);\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    key: \"_finishedUploading\",\r\n    value: function _finishedUploading(files, xhr, e) {\r\n      var response = void 0;\r\n\r\n      if (files[0].status === Dropzone.CANCELED) {\r\n        return;\r\n      }\r\n\r\n      if (xhr.readyState !== 4) {\r\n        return;\r\n      }\r\n\r\n      if (xhr.responseType !== 'arraybuffer' && xhr.responseType !== 'blob') {\r\n        response = xhr.responseText;\r\n\r\n        if (xhr.getResponseHeader(\"content-type\") && ~xhr.getResponseHeader(\"content-type\").indexOf(\"application/json\")) {\r\n          try {\r\n            response = JSON.parse(response);\r\n          } catch (error) {\r\n            e = error;\r\n            response = \"Invalid JSON response from server.\";\r\n          }\r\n        }\r\n      }\r\n\r\n      this._updateFilesUploadProgress(files);\r\n\r\n      if (!(200 <= xhr.status && xhr.status < 300)) {\r\n        this._handleUploadError(files, xhr, response);\r\n      } else {\r\n        if (files[0].upload.chunked) {\r\n          files[0].upload.finishedChunkUpload(this._getChunk(files[0], xhr));\r\n        } else {\r\n          this._finished(files, response, e);\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    key: \"_handleUploadError\",\r\n    value: function _handleUploadError(files, xhr, response) {\r\n      if (files[0].status === Dropzone.CANCELED) {\r\n        return;\r\n      }\r\n\r\n      if (files[0].upload.chunked && this.options.retryChunks) {\r\n        var chunk = this._getChunk(files[0], xhr);\r\n        if (chunk.retries++ < this.options.retryChunksLimit) {\r\n          this._uploadData(files, [chunk.dataBlock]);\r\n          return;\r\n        } else {\r\n          console.warn('Retried this chunk too often. Giving up.');\r\n        }\r\n      }\r\n\r\n      for (var _iterator30 = files, _isArray30 = true, _i32 = 0, _iterator30 = _isArray30 ? _iterator30 : _iterator30[Symbol.iterator]();;) {\r\n        var _ref29;\r\n\r\n        if (_isArray30) {\r\n          if (_i32 >= _iterator30.length) break;\r\n          _ref29 = _iterator30[_i32++];\r\n        } else {\r\n          _i32 = _iterator30.next();\r\n          if (_i32.done) break;\r\n          _ref29 = _i32.value;\r\n        }\r\n\r\n        var file = _ref29;\r\n\r\n        this._errorProcessing(files, response || this.options.dictResponseError.replace(\"{{statusCode}}\", xhr.status), xhr);\r\n      }\r\n    }\r\n  }, {\r\n    key: \"submitRequest\",\r\n    value: function submitRequest(xhr, formData, files) {\r\n      xhr.send(formData);\r\n    }\r\n\r\n    // Called internally when processing is finished.\r\n    // Individual callbacks have to be called in the appropriate sections.\r\n\r\n  }, {\r\n    key: \"_finished\",\r\n    value: function _finished(files, responseText, e) {\r\n      for (var _iterator31 = files, _isArray31 = true, _i33 = 0, _iterator31 = _isArray31 ? _iterator31 : _iterator31[Symbol.iterator]();;) {\r\n        var _ref30;\r\n\r\n        if (_isArray31) {\r\n          if (_i33 >= _iterator31.length) break;\r\n          _ref30 = _iterator31[_i33++];\r\n        } else {\r\n          _i33 = _iterator31.next();\r\n          if (_i33.done) break;\r\n          _ref30 = _i33.value;\r\n        }\r\n\r\n        var file = _ref30;\r\n\r\n        file.status = Dropzone.SUCCESS;\r\n        this.emit(\"success\", file, responseText, e);\r\n        this.emit(\"complete\", file);\r\n      }\r\n      if (this.options.uploadMultiple) {\r\n        this.emit(\"successmultiple\", files, responseText, e);\r\n        this.emit(\"completemultiple\", files);\r\n      }\r\n\r\n      if (this.options.autoProcessQueue) {\r\n        return this.processQueue();\r\n      }\r\n    }\r\n\r\n    // Called internally when processing is finished.\r\n    // Individual callbacks have to be called in the appropriate sections.\r\n\r\n  }, {\r\n    key: \"_errorProcessing\",\r\n    value: function _errorProcessing(files, message, xhr) {\r\n      for (var _iterator32 = files, _isArray32 = true, _i34 = 0, _iterator32 = _isArray32 ? _iterator32 : _iterator32[Symbol.iterator]();;) {\r\n        var _ref31;\r\n\r\n        if (_isArray32) {\r\n          if (_i34 >= _iterator32.length) break;\r\n          _ref31 = _iterator32[_i34++];\r\n        } else {\r\n          _i34 = _iterator32.next();\r\n          if (_i34.done) break;\r\n          _ref31 = _i34.value;\r\n        }\r\n\r\n        var file = _ref31;\r\n\r\n        file.status = Dropzone.ERROR;\r\n        this.emit(\"error\", file, message, xhr);\r\n        this.emit(\"complete\", file);\r\n      }\r\n      if (this.options.uploadMultiple) {\r\n        this.emit(\"errormultiple\", files, message, xhr);\r\n        this.emit(\"completemultiple\", files);\r\n      }\r\n\r\n      if (this.options.autoProcessQueue) {\r\n        return this.processQueue();\r\n      }\r\n    }\r\n  }], [{\r\n    key: \"uuidv4\",\r\n    value: function uuidv4() {\r\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        var r = Math.random() * 16 | 0,\r\n            v = c === 'x' ? r : r & 0x3 | 0x8;\r\n        return v.toString(16);\r\n      });\r\n    }\r\n  }]);\r\n\r\n  return Dropzone;\r\n}(Emitter);\r\n\r\nDropzone.initClass();\r\n\r\nDropzone.version = \"5.4.0\";\r\n\r\n// This is a map of options for your different dropzones. Add configurations\r\n// to this object for your different dropzone elemens.\r\n//\r\n// Example:\r\n//\r\n//     Dropzone.options.myDropzoneElementId = { maxFilesize: 1 };\r\n//\r\n// To disable autoDiscover for a specific element, you can set `false` as an option:\r\n//\r\n//     Dropzone.options.myDisabledElementId = false;\r\n//\r\n// And in html:\r\n//\r\n//     <form action=\"/upload\" id=\"my-dropzone-element-id\" class=\"dropzone\"></form>\r\nDropzone.options = {};\r\n\r\n// Returns the options for an element or undefined if none available.\r\nDropzone.optionsForElement = function (element) {\r\n  // Get the `Dropzone.options.elementId` for this element if it exists\r\n  if (element.getAttribute(\"id\")) {\r\n    return Dropzone.options[camelize(element.getAttribute(\"id\"))];\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\n// Holds a list of all dropzone instances\r\nDropzone.instances = [];\r\n\r\n// Returns the dropzone for given element if any\r\nDropzone.forElement = function (element) {\r\n  if (typeof element === \"string\") {\r\n    element = document.querySelector(element);\r\n  }\r\n  if ((element != null ? element.dropzone : undefined) == null) {\r\n    throw new Error(\"No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.\");\r\n  }\r\n  return element.dropzone;\r\n};\r\n\r\n// Set to false if you don't want Dropzone to automatically find and attach to .dropzone elements.\r\nDropzone.autoDiscover = true;\r\n\r\n// Looks for all .dropzone elements and creates a dropzone for them\r\nDropzone.discover = function () {\r\n  var dropzones = void 0;\r\n  if (document.querySelectorAll) {\r\n    dropzones = document.querySelectorAll(\".dropzone\");\r\n  } else {\r\n    dropzones = [];\r\n    // IE :(\r\n    var checkElements = function checkElements(elements) {\r\n      return function () {\r\n        var result = [];\r\n        for (var _iterator33 = elements, _isArray33 = true, _i35 = 0, _iterator33 = _isArray33 ? _iterator33 : _iterator33[Symbol.iterator]();;) {\r\n          var _ref32;\r\n\r\n          if (_isArray33) {\r\n            if (_i35 >= _iterator33.length) break;\r\n            _ref32 = _iterator33[_i35++];\r\n          } else {\r\n            _i35 = _iterator33.next();\r\n            if (_i35.done) break;\r\n            _ref32 = _i35.value;\r\n          }\r\n\r\n          var el = _ref32;\r\n\r\n          if (/(^| )dropzone($| )/.test(el.className)) {\r\n            result.push(dropzones.push(el));\r\n          } else {\r\n            result.push(undefined);\r\n          }\r\n        }\r\n        return result;\r\n      }();\r\n    };\r\n    checkElements(document.getElementsByTagName(\"div\"));\r\n    checkElements(document.getElementsByTagName(\"form\"));\r\n  }\r\n\r\n  return function () {\r\n    var result = [];\r\n    for (var _iterator34 = dropzones, _isArray34 = true, _i36 = 0, _iterator34 = _isArray34 ? _iterator34 : _iterator34[Symbol.iterator]();;) {\r\n      var _ref33;\r\n\r\n      if (_isArray34) {\r\n        if (_i36 >= _iterator34.length) break;\r\n        _ref33 = _iterator34[_i36++];\r\n      } else {\r\n        _i36 = _iterator34.next();\r\n        if (_i36.done) break;\r\n        _ref33 = _i36.value;\r\n      }\r\n\r\n      var dropzone = _ref33;\r\n\r\n      // Create a dropzone unless auto discover has been disabled for specific element\r\n      if (Dropzone.optionsForElement(dropzone) !== false) {\r\n        result.push(new Dropzone(dropzone));\r\n      } else {\r\n        result.push(undefined);\r\n      }\r\n    }\r\n    return result;\r\n  }();\r\n};\r\n\r\n// Since the whole Drag'n'Drop API is pretty new, some browsers implement it,\r\n// but not correctly.\r\n// So I created a blacklist of userAgents. Yes, yes. Browser sniffing, I know.\r\n// But what to do when browsers *theoretically* support an API, but crash\r\n// when using it.\r\n//\r\n// This is a list of regular expressions tested against navigator.userAgent\r\n//\r\n// ** It should only be used on browser that *do* support the API, but\r\n// incorrectly **\r\n//\r\nDropzone.blacklistedBrowsers = [\r\n// The mac os and windows phone version of opera 12 seems to have a problem with the File drag'n'drop API.\r\n/opera.*(Macintosh|Windows Phone).*version\\/12/i];\r\n\r\n// Checks if the browser is supported\r\nDropzone.isBrowserSupported = function () {\r\n  var capableBrowser = true;\r\n\r\n  if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {\r\n    if (!(\"classList\" in document.createElement(\"a\"))) {\r\n      capableBrowser = false;\r\n    } else {\r\n      // The browser supports the API, but may be blacklisted.\r\n      for (var _iterator35 = Dropzone.blacklistedBrowsers, _isArray35 = true, _i37 = 0, _iterator35 = _isArray35 ? _iterator35 : _iterator35[Symbol.iterator]();;) {\r\n        var _ref34;\r\n\r\n        if (_isArray35) {\r\n          if (_i37 >= _iterator35.length) break;\r\n          _ref34 = _iterator35[_i37++];\r\n        } else {\r\n          _i37 = _iterator35.next();\r\n          if (_i37.done) break;\r\n          _ref34 = _i37.value;\r\n        }\r\n\r\n        var regex = _ref34;\r\n\r\n        if (regex.test(navigator.userAgent)) {\r\n          capableBrowser = false;\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    capableBrowser = false;\r\n  }\r\n\r\n  return capableBrowser;\r\n};\r\n\r\nDropzone.dataURItoBlob = function (dataURI) {\r\n  // convert base64 to raw binary data held in a string\r\n  // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\r\n  var byteString = atob(dataURI.split(',')[1]);\r\n\r\n  // separate out the mime component\r\n  var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n\r\n  // write the bytes of the string to an ArrayBuffer\r\n  var ab = new ArrayBuffer(byteString.length);\r\n  var ia = new Uint8Array(ab);\r\n  for (var i = 0, end = byteString.length, asc = 0 <= end; asc ? i <= end : i >= end; asc ? i++ : i--) {\r\n    ia[i] = byteString.charCodeAt(i);\r\n  }\r\n\r\n  // write the ArrayBuffer to a blob\r\n  return new Blob([ab], { type: mimeString });\r\n};\r\n\r\n// Returns an array without the rejected item\r\nvar without = function without(list, rejectedItem) {\r\n  return list.filter(function (item) {\r\n    return item !== rejectedItem;\r\n  }).map(function (item) {\r\n    return item;\r\n  });\r\n};\r\n\r\n// abc-def_ghi -> abcDefGhi\r\nvar camelize = function camelize(str) {\r\n  return str.replace(/[\\-_](\\w)/g, function (match) {\r\n    return match.charAt(1).toUpperCase();\r\n  });\r\n};\r\n\r\n// Creates an element from string\r\nDropzone.createElement = function (string) {\r\n  var div = document.createElement(\"div\");\r\n  div.innerHTML = string;\r\n  return div.childNodes[0];\r\n};\r\n\r\n// Tests if given element is inside (or simply is) the container\r\nDropzone.elementInside = function (element, container) {\r\n  if (element === container) {\r\n    return true;\r\n  } // Coffeescript doesn't support do/while loops\r\n  while (element = element.parentNode) {\r\n    if (element === container) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nDropzone.getElement = function (el, name) {\r\n  var element = void 0;\r\n  if (typeof el === \"string\") {\r\n    element = document.querySelector(el);\r\n  } else if (el.nodeType != null) {\r\n    element = el;\r\n  }\r\n  if (element == null) {\r\n    throw new Error(\"Invalid `\" + name + \"` option provided. Please provide a CSS selector or a plain HTML element.\");\r\n  }\r\n  return element;\r\n};\r\n\r\nDropzone.getElements = function (els, name) {\r\n  var el = void 0,\r\n      elements = void 0;\r\n  if (els instanceof Array) {\r\n    elements = [];\r\n    try {\r\n      for (var _iterator36 = els, _isArray36 = true, _i38 = 0, _iterator36 = _isArray36 ? _iterator36 : _iterator36[Symbol.iterator]();;) {\r\n        if (_isArray36) {\r\n          if (_i38 >= _iterator36.length) break;\r\n          el = _iterator36[_i38++];\r\n        } else {\r\n          _i38 = _iterator36.next();\r\n          if (_i38.done) break;\r\n          el = _i38.value;\r\n        }\r\n\r\n        elements.push(this.getElement(el, name));\r\n      }\r\n    } catch (e) {\r\n      elements = null;\r\n    }\r\n  } else if (typeof els === \"string\") {\r\n    elements = [];\r\n    for (var _iterator37 = document.querySelectorAll(els), _isArray37 = true, _i39 = 0, _iterator37 = _isArray37 ? _iterator37 : _iterator37[Symbol.iterator]();;) {\r\n      if (_isArray37) {\r\n        if (_i39 >= _iterator37.length) break;\r\n        el = _iterator37[_i39++];\r\n      } else {\r\n        _i39 = _iterator37.next();\r\n        if (_i39.done) break;\r\n        el = _i39.value;\r\n      }\r\n\r\n      elements.push(el);\r\n    }\r\n  } else if (els.nodeType != null) {\r\n    elements = [els];\r\n  }\r\n\r\n  if (elements == null || !elements.length) {\r\n    throw new Error(\"Invalid `\" + name + \"` option provided. Please provide a CSS selector, a plain HTML element or a list of those.\");\r\n  }\r\n\r\n  return elements;\r\n};\r\n\r\n// Asks the user the question and calls accepted or rejected accordingly\r\n//\r\n// The default implementation just uses `window.confirm` and then calls the\r\n// appropriate callback.\r\nDropzone.confirm = function (question, accepted, rejected) {\r\n  if (window.confirm(question)) {\r\n    return accepted();\r\n  } else if (rejected != null) {\r\n    return rejected();\r\n  }\r\n};\r\n\r\n// Validates the mime type like this:\r\n//\r\n// https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept\r\nDropzone.isValidFile = function (file, acceptedFiles) {\r\n  if (!acceptedFiles) {\r\n    return true;\r\n  } // If there are no accepted mime types, it's OK\r\n  acceptedFiles = acceptedFiles.split(\",\");\r\n\r\n  var mimeType = file.type;\r\n  var baseMimeType = mimeType.replace(/\\/.*$/, \"\");\r\n\r\n  for (var _iterator38 = acceptedFiles, _isArray38 = true, _i40 = 0, _iterator38 = _isArray38 ? _iterator38 : _iterator38[Symbol.iterator]();;) {\r\n    var _ref35;\r\n\r\n    if (_isArray38) {\r\n      if (_i40 >= _iterator38.length) break;\r\n      _ref35 = _iterator38[_i40++];\r\n    } else {\r\n      _i40 = _iterator38.next();\r\n      if (_i40.done) break;\r\n      _ref35 = _i40.value;\r\n    }\r\n\r\n    var validType = _ref35;\r\n\r\n    validType = validType.trim();\r\n    if (validType.charAt(0) === \".\") {\r\n      if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {\r\n        return true;\r\n      }\r\n    } else if (/\\/\\*$/.test(validType)) {\r\n      // This is something like a image/* mime type\r\n      if (baseMimeType === validType.replace(/\\/.*$/, \"\")) {\r\n        return true;\r\n      }\r\n    } else {\r\n      if (mimeType === validType) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n// Augment jQuery\r\nif (typeof jQuery !== 'undefined' && jQuery !== null) {\r\n  jQuery.fn.dropzone = function (options) {\r\n    return this.each(function () {\r\n      return new Dropzone(this, options);\r\n    });\r\n  };\r\n}\r\n\r\nif ( true && module !== null) {\r\n  module.exports = Dropzone;\r\n} else {\r\n  window.Dropzone = Dropzone;\r\n}\r\n\r\n// Dropzone file status codes\r\nDropzone.ADDED = \"added\";\r\n\r\nDropzone.QUEUED = \"queued\";\r\n// For backwards compatibility. Now, if a file is accepted, it's either queued\r\n// or uploading.\r\nDropzone.ACCEPTED = Dropzone.QUEUED;\r\n\r\nDropzone.UPLOADING = \"uploading\";\r\nDropzone.PROCESSING = Dropzone.UPLOADING; // alias\r\n\r\nDropzone.CANCELED = \"canceled\";\r\nDropzone.ERROR = \"error\";\r\nDropzone.SUCCESS = \"success\";\r\n\r\n/*\r\n\r\n Bugfix for iOS 6 and 7\r\n Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios\r\n based on the work of https://github.com/stomita/ios-imagefile-megapixel\r\n\r\n */\r\n\r\n// Detecting vertical squash in loaded image.\r\n// Fixes a bug which squash image vertically while drawing into canvas for some images.\r\n// This is a bug in iOS6 devices. This function from https://github.com/stomita/ios-imagefile-megapixel\r\nvar detectVerticalSquash = function detectVerticalSquash(img) {\r\n  var iw = img.naturalWidth;\r\n  var ih = img.naturalHeight;\r\n  var canvas = document.createElement(\"canvas\");\r\n  canvas.width = 1;\r\n  canvas.height = ih;\r\n  var ctx = canvas.getContext(\"2d\");\r\n  ctx.drawImage(img, 0, 0);\r\n\r\n  var _ctx$getImageData = ctx.getImageData(1, 0, 1, ih),\r\n      data = _ctx$getImageData.data;\r\n\r\n  // search image edge pixel position in case it is squashed vertically.\r\n\r\n\r\n  var sy = 0;\r\n  var ey = ih;\r\n  var py = ih;\r\n  while (py > sy) {\r\n    var alpha = data[(py - 1) * 4 + 3];\r\n\r\n    if (alpha === 0) {\r\n      ey = py;\r\n    } else {\r\n      sy = py;\r\n    }\r\n\r\n    py = ey + sy >> 1;\r\n  }\r\n  var ratio = py / ih;\r\n\r\n  if (ratio === 0) {\r\n    return 1;\r\n  } else {\r\n    return ratio;\r\n  }\r\n};\r\n\r\n// A replacement for context.drawImage\r\n// (args are for source and destination).\r\nvar drawImageIOSFix = function drawImageIOSFix(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {\r\n  var vertSquashRatio = detectVerticalSquash(img);\r\n  return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);\r\n};\r\n\r\n// Based on MinifyJpeg\r\n// Source: http://www.perry.cz/files/ExifRestorer.js\r\n// http://elicon.blog57.fc2.com/blog-entry-206.html\r\n\r\nvar ExifRestore = function () {\r\n  function ExifRestore() {\r\n    _classCallCheck(this, ExifRestore);\r\n  }\r\n\r\n  _createClass(ExifRestore, null, [{\r\n    key: \"initClass\",\r\n    value: function initClass() {\r\n      this.KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n    }\r\n  }, {\r\n    key: \"encode64\",\r\n    value: function encode64(input) {\r\n      var output = '';\r\n      var chr1 = undefined;\r\n      var chr2 = undefined;\r\n      var chr3 = '';\r\n      var enc1 = undefined;\r\n      var enc2 = undefined;\r\n      var enc3 = undefined;\r\n      var enc4 = '';\r\n      var i = 0;\r\n      while (true) {\r\n        chr1 = input[i++];\r\n        chr2 = input[i++];\r\n        chr3 = input[i++];\r\n        enc1 = chr1 >> 2;\r\n        enc2 = (chr1 & 3) << 4 | chr2 >> 4;\r\n        enc3 = (chr2 & 15) << 2 | chr3 >> 6;\r\n        enc4 = chr3 & 63;\r\n        if (isNaN(chr2)) {\r\n          enc3 = enc4 = 64;\r\n        } else if (isNaN(chr3)) {\r\n          enc4 = 64;\r\n        }\r\n        output = output + this.KEY_STR.charAt(enc1) + this.KEY_STR.charAt(enc2) + this.KEY_STR.charAt(enc3) + this.KEY_STR.charAt(enc4);\r\n        chr1 = chr2 = chr3 = '';\r\n        enc1 = enc2 = enc3 = enc4 = '';\r\n        if (!(i < input.length)) {\r\n          break;\r\n        }\r\n      }\r\n      return output;\r\n    }\r\n  }, {\r\n    key: \"restore\",\r\n    value: function restore(origFileBase64, resizedFileBase64) {\r\n      if (!origFileBase64.match('data:image/jpeg;base64,')) {\r\n        return resizedFileBase64;\r\n      }\r\n      var rawImage = this.decode64(origFileBase64.replace('data:image/jpeg;base64,', ''));\r\n      var segments = this.slice2Segments(rawImage);\r\n      var image = this.exifManipulation(resizedFileBase64, segments);\r\n      return \"data:image/jpeg;base64,\" + this.encode64(image);\r\n    }\r\n  }, {\r\n    key: \"exifManipulation\",\r\n    value: function exifManipulation(resizedFileBase64, segments) {\r\n      var exifArray = this.getExifArray(segments);\r\n      var newImageArray = this.insertExif(resizedFileBase64, exifArray);\r\n      var aBuffer = new Uint8Array(newImageArray);\r\n      return aBuffer;\r\n    }\r\n  }, {\r\n    key: \"getExifArray\",\r\n    value: function getExifArray(segments) {\r\n      var seg = undefined;\r\n      var x = 0;\r\n      while (x < segments.length) {\r\n        seg = segments[x];\r\n        if (seg[0] === 255 & seg[1] === 225) {\r\n          return seg;\r\n        }\r\n        x++;\r\n      }\r\n      return [];\r\n    }\r\n  }, {\r\n    key: \"insertExif\",\r\n    value: function insertExif(resizedFileBase64, exifArray) {\r\n      var imageData = resizedFileBase64.replace('data:image/jpeg;base64,', '');\r\n      var buf = this.decode64(imageData);\r\n      var separatePoint = buf.indexOf(255, 3);\r\n      var mae = buf.slice(0, separatePoint);\r\n      var ato = buf.slice(separatePoint);\r\n      var array = mae;\r\n      array = array.concat(exifArray);\r\n      array = array.concat(ato);\r\n      return array;\r\n    }\r\n  }, {\r\n    key: \"slice2Segments\",\r\n    value: function slice2Segments(rawImageArray) {\r\n      var head = 0;\r\n      var segments = [];\r\n      while (true) {\r\n        var length;\r\n        if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 218) {\r\n          break;\r\n        }\r\n        if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 216) {\r\n          head += 2;\r\n        } else {\r\n          length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3];\r\n          var endPoint = head + length + 2;\r\n          var seg = rawImageArray.slice(head, endPoint);\r\n          segments.push(seg);\r\n          head = endPoint;\r\n        }\r\n        if (head > rawImageArray.length) {\r\n          break;\r\n        }\r\n      }\r\n      return segments;\r\n    }\r\n  }, {\r\n    key: \"decode64\",\r\n    value: function decode64(input) {\r\n      var output = '';\r\n      var chr1 = undefined;\r\n      var chr2 = undefined;\r\n      var chr3 = '';\r\n      var enc1 = undefined;\r\n      var enc2 = undefined;\r\n      var enc3 = undefined;\r\n      var enc4 = '';\r\n      var i = 0;\r\n      var buf = [];\r\n      // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\r\n      var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\r\n      if (base64test.exec(input)) {\r\n        console.warn('There were invalid base64 characters in the input text.\\nValid base64 characters are A-Z, a-z, 0-9, \\'+\\', \\'/\\',and \\'=\\'\\nExpect errors in decoding.');\r\n      }\r\n      input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\r\n      while (true) {\r\n        enc1 = this.KEY_STR.indexOf(input.charAt(i++));\r\n        enc2 = this.KEY_STR.indexOf(input.charAt(i++));\r\n        enc3 = this.KEY_STR.indexOf(input.charAt(i++));\r\n        enc4 = this.KEY_STR.indexOf(input.charAt(i++));\r\n        chr1 = enc1 << 2 | enc2 >> 4;\r\n        chr2 = (enc2 & 15) << 4 | enc3 >> 2;\r\n        chr3 = (enc3 & 3) << 6 | enc4;\r\n        buf.push(chr1);\r\n        if (enc3 !== 64) {\r\n          buf.push(chr2);\r\n        }\r\n        if (enc4 !== 64) {\r\n          buf.push(chr3);\r\n        }\r\n        chr1 = chr2 = chr3 = '';\r\n        enc1 = enc2 = enc3 = enc4 = '';\r\n        if (!(i < input.length)) {\r\n          break;\r\n        }\r\n      }\r\n      return buf;\r\n    }\r\n  }]);\r\n\r\n  return ExifRestore;\r\n}();\r\n\r\nExifRestore.initClass();\r\n\r\n/*\r\n * contentloaded.js\r\n *\r\n * Author: Diego Perini (diego.perini at gmail.com)\r\n * Summary: cross-browser wrapper for DOMContentLoaded\r\n * Updated: 20101020\r\n * License: MIT\r\n * Version: 1.2\r\n *\r\n * URL:\r\n * http://javascript.nwbox.com/ContentLoaded/\r\n * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE\r\n */\r\n\r\n// @win window reference\r\n// @fn function reference\r\nvar contentLoaded = function contentLoaded(win, fn) {\r\n  var done = false;\r\n  var top = true;\r\n  var doc = win.document;\r\n  var root = doc.documentElement;\r\n  var add = doc.addEventListener ? \"addEventListener\" : \"attachEvent\";\r\n  var rem = doc.addEventListener ? \"removeEventListener\" : \"detachEvent\";\r\n  var pre = doc.addEventListener ? \"\" : \"on\";\r\n  var init = function init(e) {\r\n    if (e.type === \"readystatechange\" && doc.readyState !== \"complete\") {\r\n      return;\r\n    }\r\n    (e.type === \"load\" ? win : doc)[rem](pre + e.type, init, false);\r\n    if (!done && (done = true)) {\r\n      return fn.call(win, e.type || e);\r\n    }\r\n  };\r\n\r\n  var poll = function poll() {\r\n    try {\r\n      root.doScroll(\"left\");\r\n    } catch (e) {\r\n      setTimeout(poll, 50);\r\n      return;\r\n    }\r\n    return init(\"poll\");\r\n  };\r\n\r\n  if (doc.readyState !== \"complete\") {\r\n    if (doc.createEventObject && root.doScroll) {\r\n      try {\r\n        top = !win.frameElement;\r\n      } catch (error) {}\r\n      if (top) {\r\n        poll();\r\n      }\r\n    }\r\n    doc[add](pre + \"DOMContentLoaded\", init, false);\r\n    doc[add](pre + \"readystatechange\", init, false);\r\n    return win[add](pre + \"load\", init, false);\r\n  }\r\n};\r\n\r\n// As a single function to be able to write tests.\r\nDropzone._autoDiscoverFunction = function () {\r\n  if (Dropzone.autoDiscover) {\r\n    return Dropzone.discover();\r\n  }\r\n};\r\ncontentLoaded(window, Dropzone._autoDiscoverFunction);\r\n\r\nfunction __guard__(value, transform) {\r\n  return typeof value !== 'undefined' && value !== null ? transform(value) : undefined;\r\n}\r\nfunction __guardMethod__(obj, methodName, transform) {\r\n  if (typeof obj !== 'undefined' && obj !== null && typeof obj[methodName] === 'function') {\r\n    return transform(obj, methodName);\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Modules/Media/node_modules/dropzone/dist/dropzone.js\n");

/***/ }),

/***/ "./Modules/Media/Resources/assets/admin/js/ImagePicker.js":
/*!****************************************************************!*\
  !*** ./Modules/Media/Resources/assets/admin/js/ImagePicker.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _default)\n/* harmony export */ });\n/* harmony import */ var _MediaPicker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MediaPicker */ \"./Modules/Media/Resources/assets/admin/js/MediaPicker.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nvar _default = /*#__PURE__*/function () {\n  function _default() {\n    var _this = this;\n    _classCallCheck(this, _default);\n    $('.image-picker').on('click', function (e) {\n      _this.pickImage(e);\n    });\n    this.sortable();\n    this.removeImageEventListener();\n  }\n  _createClass(_default, [{\n    key: \"pickImage\",\n    value: function pickImage(e) {\n      var _this2 = this;\n      var inputName = e.currentTarget.dataset.inputName;\n      var multiple = e.currentTarget.hasAttribute('data-multiple');\n      var picker = new _MediaPicker__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n        type: 'image',\n        multiple: multiple\n      });\n      picker.on('select', function (file) {\n        _this2.addImage(inputName, file, multiple, e.currentTarget);\n      });\n    }\n  }, {\n    key: \"addImage\",\n    value: function addImage(inputName, file, multiple, target) {\n      var html = this.getTemplate(inputName, file);\n      if (multiple) {\n        var multipleImagesWrapper = $(target).next('.multiple-images');\n        multipleImagesWrapper.find('.image-holder.placeholder').remove();\n        multipleImagesWrapper.find('.image-list').append(html);\n      } else {\n        $(target).siblings('.single-image').html(html);\n      }\n    }\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate(inputName, file) {\n      return $(\"\\n            <div class=\\\"image-holder\\\">\\n                <img src=\\\"\".concat(file.path, \"\\\">\\n                <button type=\\\"button\\\" class=\\\"btn remove-image\\\"></button>\\n                <input type=\\\"hidden\\\" name=\\\"\").concat(inputName, \"\\\" value=\\\"\").concat(file.id, \"\\\">\\n            </div>\\n        \"));\n    }\n  }, {\n    key: \"sortable\",\n    value: function sortable() {\n      var imageList = $('.image-list');\n      if (imageList.length > 0) {\n        Sortable.create(imageList[0], {\n          animation: 150\n        });\n      }\n    }\n  }, {\n    key: \"removeImageEventListener\",\n    value: function removeImageEventListener() {\n      var _this3 = this;\n      $('.image-holder-wrapper').on('click', '.remove-image', function (e) {\n        e.preventDefault();\n        var imageHolderWrapper = $(e.currentTarget).closest('.image-holder-wrapper');\n        if (imageHolderWrapper.find('.image-holder').length === 1) {\n          imageHolderWrapper.html(_this3.getImagePlaceholder(e.currentTarget.dataset.inputName));\n        }\n        $(e.currentTarget).parent().remove();\n      });\n    }\n  }, {\n    key: \"getImagePlaceholder\",\n    value: function getImagePlaceholder(inputName) {\n      return \"\\n            <div class=\\\"image-holder placeholder cursor-auto\\\">\\n                <i class=\\\"fa fa-picture-o\\\"></i>\\n                <input type=\\\"hidden\\\" name=\\\"\".concat(inputName, \"\\\">\\n            </div>\\n        \");\n    }\n  }]);\n  return _default;\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Nb2R1bGVzL01lZGlhL1Jlc291cmNlcy9hc3NldHMvYWRtaW4vanMvSW1hZ2VQaWNrZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBd0M7QUFBQSxJQUFBQyxRQUFBO0VBR3BDLFNBQUFBLFNBQUEsRUFBYztJQUFBLElBQUFDLEtBQUE7SUFBQUMsZUFBQSxPQUFBRixRQUFBO0lBQ1ZHLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQ0MsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFDQyxDQUFDLEVBQUs7TUFDbENKLEtBQUksQ0FBQ0ssU0FBUyxDQUFDRCxDQUFDLENBQUM7SUFDckIsQ0FBQyxDQUFDO0lBRUYsSUFBSSxDQUFDRSxRQUFRLENBQUMsQ0FBQztJQUNmLElBQUksQ0FBQ0Msd0JBQXdCLENBQUMsQ0FBQztFQUNuQztFQUFDQyxZQUFBLENBQUFULFFBQUE7SUFBQVUsR0FBQTtJQUFBQyxLQUFBLEVBRUQsU0FBQUwsVUFBVUQsQ0FBQyxFQUFFO01BQUEsSUFBQU8sTUFBQTtNQUNULElBQUlDLFNBQVMsR0FBR1IsQ0FBQyxDQUFDUyxhQUFhLENBQUNDLE9BQU8sQ0FBQ0YsU0FBUztNQUNqRCxJQUFJRyxRQUFRLEdBQUdYLENBQUMsQ0FBQ1MsYUFBYSxDQUFDRyxZQUFZLENBQUMsZUFBZSxDQUFDO01BRTVELElBQUlDLE1BQU0sR0FBRyxJQUFJbkIsb0RBQVcsQ0FBQztRQUFFb0IsSUFBSSxFQUFFLE9BQU87UUFBRUgsUUFBUSxFQUFSQTtNQUFTLENBQUMsQ0FBQztNQUV6REUsTUFBTSxDQUFDZCxFQUFFLENBQUMsUUFBUSxFQUFFLFVBQUNnQixJQUFJLEVBQUs7UUFDMUJSLE1BQUksQ0FBQ1MsUUFBUSxDQUFDUixTQUFTLEVBQUVPLElBQUksRUFBRUosUUFBUSxFQUFFWCxDQUFDLENBQUNTLGFBQWEsQ0FBQztNQUM3RCxDQUFDLENBQUM7SUFDTjtFQUFDO0lBQUFKLEdBQUE7SUFBQUMsS0FBQSxFQUVELFNBQUFVLFNBQVNSLFNBQVMsRUFBRU8sSUFBSSxFQUFFSixRQUFRLEVBQUVNLE1BQU0sRUFBRTtNQUN4QyxJQUFJQyxJQUFJLEdBQUcsSUFBSSxDQUFDQyxXQUFXLENBQUNYLFNBQVMsRUFBRU8sSUFBSSxDQUFDO01BRTVDLElBQUlKLFFBQVEsRUFBRTtRQUNWLElBQUlTLHFCQUFxQixHQUFHdEIsQ0FBQyxDQUFDbUIsTUFBTSxDQUFDLENBQUNJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztRQUU5REQscUJBQXFCLENBQUNFLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDQyxNQUFNLENBQUMsQ0FBQztRQUNoRUgscUJBQXFCLENBQUNFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQ0UsTUFBTSxDQUFDTixJQUFJLENBQUM7TUFDMUQsQ0FBQyxNQUFNO1FBQ0hwQixDQUFDLENBQUNtQixNQUFNLENBQUMsQ0FBQ1EsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDUCxJQUFJLENBQUNBLElBQUksQ0FBQztNQUNsRDtJQUNKO0VBQUM7SUFBQWIsR0FBQTtJQUFBQyxLQUFBLEVBRUQsU0FBQWEsWUFBWVgsU0FBUyxFQUFFTyxJQUFJLEVBQUU7TUFDekIsT0FBT2pCLENBQUMsMkVBQUE0QixNQUFBLENBRVlYLElBQUksQ0FBQ1ksSUFBSSx1SUFBQUQsTUFBQSxDQUVRbEIsU0FBUyxpQkFBQWtCLE1BQUEsQ0FBWVgsSUFBSSxDQUFDYSxFQUFFLHNDQUVoRSxDQUFDO0lBQ047RUFBQztJQUFBdkIsR0FBQTtJQUFBQyxLQUFBLEVBRUQsU0FBQUosU0FBQSxFQUFXO01BQ1AsSUFBSTJCLFNBQVMsR0FBRy9CLENBQUMsQ0FBQyxhQUFhLENBQUM7TUFFaEMsSUFBSStCLFNBQVMsQ0FBQ0MsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUN0QkMsUUFBUSxDQUFDQyxNQUFNLENBQUNILFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtVQUFFSSxTQUFTLEVBQUU7UUFBSSxDQUFDLENBQUM7TUFDckQ7SUFDSjtFQUFDO0lBQUE1QixHQUFBO0lBQUFDLEtBQUEsRUFFRCxTQUFBSCx5QkFBQSxFQUEyQjtNQUFBLElBQUErQixNQUFBO01BQ3ZCcEMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUNDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsZUFBZSxFQUFFLFVBQUNDLENBQUMsRUFBSztRQUMzREEsQ0FBQyxDQUFDbUMsY0FBYyxDQUFDLENBQUM7UUFFbEIsSUFBSUMsa0JBQWtCLEdBQUd0QyxDQUFDLENBQUNFLENBQUMsQ0FBQ1MsYUFBYSxDQUFDLENBQUM0QixPQUFPLENBQUMsdUJBQXVCLENBQUM7UUFFNUUsSUFBSUQsa0JBQWtCLENBQUNkLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQ1EsTUFBTSxLQUFLLENBQUMsRUFBRTtVQUN2RE0sa0JBQWtCLENBQUNsQixJQUFJLENBQ25CZ0IsTUFBSSxDQUFDSSxtQkFBbUIsQ0FBQ3RDLENBQUMsQ0FBQ1MsYUFBYSxDQUFDQyxPQUFPLENBQUNGLFNBQVMsQ0FDOUQsQ0FBQztRQUNMO1FBRUFWLENBQUMsQ0FBQ0UsQ0FBQyxDQUFDUyxhQUFhLENBQUMsQ0FBQzhCLE1BQU0sQ0FBQyxDQUFDLENBQUNoQixNQUFNLENBQUMsQ0FBQztNQUN4QyxDQUFDLENBQUM7SUFDTjtFQUFDO0lBQUFsQixHQUFBO0lBQUFDLEtBQUEsRUFFRCxTQUFBZ0Msb0JBQW9COUIsU0FBUyxFQUFFO01BQzNCLCtLQUFBa0IsTUFBQSxDQUdxQ2xCLFNBQVM7SUFHbEQ7RUFBQztFQUFBLE9BQUFiLFFBQUE7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsZWV0Y2FydC8uL01vZHVsZXMvTWVkaWEvUmVzb3VyY2VzL2Fzc2V0cy9hZG1pbi9qcy9JbWFnZVBpY2tlci5qcz8yNWI2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNZWRpYVBpY2tlciBmcm9tICcuL01lZGlhUGlja2VyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICQoJy5pbWFnZS1waWNrZXInKS5vbignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBpY2tJbWFnZShlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5zb3J0YWJsZSgpO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlSW1hZ2VFdmVudExpc3RlbmVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcGlja0ltYWdlKGUpIHtcclxuICAgICAgICBsZXQgaW5wdXROYW1lID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaW5wdXROYW1lO1xyXG4gICAgICAgIGxldCBtdWx0aXBsZSA9IGUuY3VycmVudFRhcmdldC5oYXNBdHRyaWJ1dGUoJ2RhdGEtbXVsdGlwbGUnKTtcclxuXHJcbiAgICAgICAgbGV0IHBpY2tlciA9IG5ldyBNZWRpYVBpY2tlcih7IHR5cGU6ICdpbWFnZScsIG11bHRpcGxlIH0pO1xyXG5cclxuICAgICAgICBwaWNrZXIub24oJ3NlbGVjdCcsIChmaWxlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkSW1hZ2UoaW5wdXROYW1lLCBmaWxlLCBtdWx0aXBsZSwgZS5jdXJyZW50VGFyZ2V0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRJbWFnZShpbnB1dE5hbWUsIGZpbGUsIG11bHRpcGxlLCB0YXJnZXQpIHtcclxuICAgICAgICBsZXQgaHRtbCA9IHRoaXMuZ2V0VGVtcGxhdGUoaW5wdXROYW1lLCBmaWxlKTtcclxuXHJcbiAgICAgICAgaWYgKG11bHRpcGxlKSB7XHJcbiAgICAgICAgICAgIGxldCBtdWx0aXBsZUltYWdlc1dyYXBwZXIgPSAkKHRhcmdldCkubmV4dCgnLm11bHRpcGxlLWltYWdlcycpO1xyXG5cclxuICAgICAgICAgICAgbXVsdGlwbGVJbWFnZXNXcmFwcGVyLmZpbmQoJy5pbWFnZS1ob2xkZXIucGxhY2Vob2xkZXInKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgbXVsdGlwbGVJbWFnZXNXcmFwcGVyLmZpbmQoJy5pbWFnZS1saXN0JykuYXBwZW5kKGh0bWwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQodGFyZ2V0KS5zaWJsaW5ncygnLnNpbmdsZS1pbWFnZScpLmh0bWwoaHRtbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldFRlbXBsYXRlKGlucHV0TmFtZSwgZmlsZSkge1xyXG4gICAgICAgIHJldHVybiAkKGBcclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImltYWdlLWhvbGRlclwiPlxyXG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCIke2ZpbGUucGF0aH1cIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIHJlbW92ZS1pbWFnZVwiPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiJHtpbnB1dE5hbWV9XCIgdmFsdWU9XCIke2ZpbGUuaWR9XCI+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGApO1xyXG4gICAgfVxyXG5cclxuICAgIHNvcnRhYmxlKCkge1xyXG4gICAgICAgIGxldCBpbWFnZUxpc3QgPSAkKCcuaW1hZ2UtbGlzdCcpO1xyXG5cclxuICAgICAgICBpZiAoaW1hZ2VMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgU29ydGFibGUuY3JlYXRlKGltYWdlTGlzdFswXSwgeyBhbmltYXRpb246IDE1MCB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlSW1hZ2VFdmVudExpc3RlbmVyKCkge1xyXG4gICAgICAgICQoJy5pbWFnZS1ob2xkZXItd3JhcHBlcicpLm9uKCdjbGljaycsICcucmVtb3ZlLWltYWdlJywgKGUpID0+IHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGltYWdlSG9sZGVyV3JhcHBlciA9ICQoZS5jdXJyZW50VGFyZ2V0KS5jbG9zZXN0KCcuaW1hZ2UtaG9sZGVyLXdyYXBwZXInKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbWFnZUhvbGRlcldyYXBwZXIuZmluZCgnLmltYWdlLWhvbGRlcicpLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgaW1hZ2VIb2xkZXJXcmFwcGVyLmh0bWwoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRJbWFnZVBsYWNlaG9sZGVyKGUuY3VycmVudFRhcmdldC5kYXRhc2V0LmlucHV0TmFtZSlcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICQoZS5jdXJyZW50VGFyZ2V0KS5wYXJlbnQoKS5yZW1vdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRJbWFnZVBsYWNlaG9sZGVyKGlucHV0TmFtZSkge1xyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbWFnZS1ob2xkZXIgcGxhY2Vob2xkZXIgY3Vyc29yLWF1dG9cIj5cclxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGljdHVyZS1vXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiJHtpbnB1dE5hbWV9XCI+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcbiAgICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIk1lZGlhUGlja2VyIiwiX2RlZmF1bHQiLCJfdGhpcyIsIl9jbGFzc0NhbGxDaGVjayIsIiQiLCJvbiIsImUiLCJwaWNrSW1hZ2UiLCJzb3J0YWJsZSIsInJlbW92ZUltYWdlRXZlbnRMaXN0ZW5lciIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiX3RoaXMyIiwiaW5wdXROYW1lIiwiY3VycmVudFRhcmdldCIsImRhdGFzZXQiLCJtdWx0aXBsZSIsImhhc0F0dHJpYnV0ZSIsInBpY2tlciIsInR5cGUiLCJmaWxlIiwiYWRkSW1hZ2UiLCJ0YXJnZXQiLCJodG1sIiwiZ2V0VGVtcGxhdGUiLCJtdWx0aXBsZUltYWdlc1dyYXBwZXIiLCJuZXh0IiwiZmluZCIsInJlbW92ZSIsImFwcGVuZCIsInNpYmxpbmdzIiwiY29uY2F0IiwicGF0aCIsImlkIiwiaW1hZ2VMaXN0IiwibGVuZ3RoIiwiU29ydGFibGUiLCJjcmVhdGUiLCJhbmltYXRpb24iLCJfdGhpczMiLCJwcmV2ZW50RGVmYXVsdCIsImltYWdlSG9sZGVyV3JhcHBlciIsImNsb3Nlc3QiLCJnZXRJbWFnZVBsYWNlaG9sZGVyIiwicGFyZW50IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./Modules/Media/Resources/assets/admin/js/ImagePicker.js\n");

/***/ }),

/***/ "./Modules/Media/Resources/assets/admin/js/MediaPicker.js":
/*!****************************************************************!*\
  !*** ./Modules/Media/Resources/assets/admin/js/MediaPicker.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _default)\n/* harmony export */ });\n/* harmony import */ var _sass_media_picker_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sass/media-picker.scss */ \"./Modules/Media/Resources/assets/admin/sass/media-picker.scss\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nvar _default = /*#__PURE__*/function () {\n  function _default(options) {\n    _classCallCheck(this, _default);\n    this.options = _.merge({\n      type: null,\n      multiple: false,\n      route: 'admin.file_manager.index',\n      title: trans('media::media.file_manager.title'),\n      message: trans('media::messages.image_has_been_added')\n    }, options);\n    this.events = {};\n    this.frame = this.getFrame();\n    this.appendModalToBody();\n    this.openFrame();\n  }\n  _createClass(_default, [{\n    key: \"on\",\n    value: function on(event, handler) {\n      this.events[event] = handler;\n    }\n  }, {\n    key: \"getFrame\",\n    value: function getFrame() {\n      var src = route(this.options.route, {\n        type: this.options.type,\n        multiple: this.options.multiple\n      });\n      return $(\"<iframe class=\\\"file-manager-iframe\\\" frameborder=\\\"0\\\" src=\\\"\".concat(src, \"\\\"></iframe>\"));\n    }\n  }, {\n    key: \"appendModalToBody\",\n    value: function appendModalToBody() {\n      if ($('.media-picker-modal').length === 1) {\n        return;\n      }\n      $('body').append(this.getModal());\n    }\n  }, {\n    key: \"openFrame\",\n    value: function openFrame() {\n      var _this = this;\n      this.showModal();\n      this.frame.on('load', function () {\n        _this.selectMedia();\n      });\n    }\n  }, {\n    key: \"showModal\",\n    value: function showModal() {\n      var modal = $('.media-picker-modal').modal('show');\n      this.setFrameHeight();\n      this.setModalTitle(modal);\n      this.setModalBody(modal);\n      this.closeModalOnEsc(modal);\n    }\n  }, {\n    key: \"setFrameHeight\",\n    value: function setFrameHeight() {\n      this.frame.css('height', window.innerHeight * 0.8);\n    }\n  }, {\n    key: \"setModalTitle\",\n    value: function setModalTitle(modal) {\n      modal.find('.modal-title').text(this.options.title);\n    }\n  }, {\n    key: \"setModalBody\",\n    value: function setModalBody(modal) {\n      modal.find('.modal-body').html(this.frame);\n    }\n  }, {\n    key: \"closeModalOnEsc\",\n    value: function closeModalOnEsc(modal) {\n      var _this2 = this;\n      $(document).on('keydown', function (e) {\n        if (e.keyCode === 27) {\n          modal.modal('hide');\n        }\n      });\n      this.frame.on('load keydown', function () {\n        _this2.frame.contents().on('keydown', function (e) {\n          if (e.keyCode === 27) {\n            modal.modal('hide');\n          }\n        });\n      });\n    }\n  }, {\n    key: \"selectMedia\",\n    value: function selectMedia() {\n      var _this3 = this;\n      this.frame.contents().find('.table').on('click', '.select-media', function (e) {\n        e.preventDefault();\n        _this3.events['select'](e.currentTarget.dataset);\n        if (_this3.options.multiple) {\n          if (_this3.options.message) {\n            notify('success', _this3.options.message, {\n              context: _this3.frame.contents()\n            });\n          }\n        } else {\n          $('.media-picker-modal').modal('hide');\n        }\n      });\n    }\n  }, {\n    key: \"getModal\",\n    value: function getModal() {\n      return \"\\n            <div class=\\\"media-picker-modal modal fade\\\" role=\\\"dialog\\\">\\n                <div class=\\\"modal-dialog clearfix\\\">\\n                    <div class=\\\"modal-content col-md-10 col-sm-11 clearfix\\\">\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"modal-header\\\">\\n                                <a type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</a>\\n                                <h4 class=\\\"modal-title\\\"></h4>\\n                            </div>\\n\\n                            <div class=\\\"modal-body\\\"></div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        \";\n    }\n  }]);\n  return _default;\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Modules/Media/Resources/assets/admin/js/MediaPicker.js\n");

/***/ }),

/***/ "./Modules/Media/Resources/assets/admin/js/Uploader.js":
/*!*************************************************************!*\
  !*** ./Modules/Media/Resources/assets/admin/js/Uploader.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _default)\n/* harmony export */ });\n/* harmony import */ var dropzone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dropzone */ \"./Modules/Media/node_modules/dropzone/dist/dropzone.js\");\n/* harmony import */ var dropzone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dropzone__WEBPACK_IMPORTED_MODULE_0__);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nvar _default = /*#__PURE__*/function () {\n  function _default() {\n    _classCallCheck(this, _default);\n    (dropzone__WEBPACK_IMPORTED_MODULE_0___default().autoDiscover) = false;\n    this.dropzone = new (dropzone__WEBPACK_IMPORTED_MODULE_0___default())('.dropzone', {\n      url: route('admin.media.store'),\n      autoProcessQueue: true,\n      maxFilesize: FleetCart.maxFileSize\n    });\n    this.dropzone.on('sending', this.sending);\n    this.dropzone.on('success', this.success);\n    this.dropzone.on('error', this.error);\n  }\n  _createClass(_default, [{\n    key: \"sending\",\n    value: function sending(file, xhr) {\n      xhr.timeout = 3600000;\n      $('.alert-danger').remove();\n    }\n  }, {\n    key: \"success\",\n    value: function success() {\n      if (this.getUploadingFiles().length === 0 && this.getQueuedFiles().length === 0) {\n        setTimeout(DataTable.reload, 1000, '#media-table .table');\n      }\n    }\n  }, {\n    key: \"error\",\n    value: function error(file, response) {\n      $('.dz-progress').css('z-index', 1);\n      $(file.previewElement).find('.dz-error-message').text(response.message);\n    }\n  }]);\n  return _default;\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Nb2R1bGVzL01lZGlhL1Jlc291cmNlcy9hc3NldHMvYWRtaW4vanMvVXBsb2FkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQWdDO0FBQUEsSUFBQUMsUUFBQTtFQUc1QixTQUFBQSxTQUFBLEVBQWM7SUFBQUMsZUFBQSxPQUFBRCxRQUFBO0lBQ1ZELDhEQUFxQixHQUFHLEtBQUs7SUFFN0IsSUFBSSxDQUFDSSxRQUFRLEdBQUcsSUFBSUosaURBQVEsQ0FBQyxXQUFXLEVBQUU7TUFDdENLLEdBQUcsRUFBRUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDO01BQy9CQyxnQkFBZ0IsRUFBRSxJQUFJO01BQ3RCQyxXQUFXLEVBQUVDLFNBQVMsQ0FBQ0M7SUFDM0IsQ0FBQyxDQUFDO0lBRUYsSUFBSSxDQUFDTixRQUFRLENBQUNPLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDQyxPQUFPLENBQUM7SUFDekMsSUFBSSxDQUFDUixRQUFRLENBQUNPLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDRSxPQUFPLENBQUM7SUFDekMsSUFBSSxDQUFDVCxRQUFRLENBQUNPLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDRyxLQUFLLENBQUM7RUFDekM7RUFBQ0MsWUFBQSxDQUFBZCxRQUFBO0lBQUFlLEdBQUE7SUFBQUMsS0FBQSxFQUVELFNBQUFMLFFBQVFNLElBQUksRUFBRUMsR0FBRyxFQUFFO01BQ2ZBLEdBQUcsQ0FBQ0MsT0FBTyxHQUFHLE9BQU87TUFFckJDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLENBQUM7SUFDL0I7RUFBQztJQUFBTixHQUFBO0lBQUFDLEtBQUEsRUFFRCxTQUFBSixRQUFBLEVBQVU7TUFDTixJQUFJLElBQUksQ0FBQ1UsaUJBQWlCLENBQUMsQ0FBQyxDQUFDQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQ0MsY0FBYyxDQUFDLENBQUMsQ0FBQ0QsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUM3RUUsVUFBVSxDQUFDQyxTQUFTLENBQUNDLE1BQU0sRUFBRSxJQUFJLEVBQUUscUJBQXFCLENBQUM7TUFDN0Q7SUFDSjtFQUFDO0lBQUFaLEdBQUE7SUFBQUMsS0FBQSxFQUVELFNBQUFILE1BQU1JLElBQUksRUFBRVcsUUFBUSxFQUFFO01BQ2xCUixDQUFDLENBQUMsY0FBYyxDQUFDLENBQUNTLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO01BQ25DVCxDQUFDLENBQUNILElBQUksQ0FBQ2EsY0FBYyxDQUFDLENBQUNDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDQyxJQUFJLENBQUNKLFFBQVEsQ0FBQ0ssT0FBTyxDQUFDO0lBQzNFO0VBQUM7RUFBQSxPQUFBakMsUUFBQTtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxlZXRjYXJ0Ly4vTW9kdWxlcy9NZWRpYS9SZXNvdXJjZXMvYXNzZXRzL2FkbWluL2pzL1VwbG9hZGVyLmpzP2UwNGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERyb3B6b25lIGZyb20gJ2Ryb3B6b25lJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIERyb3B6b25lLmF1dG9EaXNjb3ZlciA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLmRyb3B6b25lID0gbmV3IERyb3B6b25lKCcuZHJvcHpvbmUnLCB7XHJcbiAgICAgICAgICAgIHVybDogcm91dGUoJ2FkbWluLm1lZGlhLnN0b3JlJyksXHJcbiAgICAgICAgICAgIGF1dG9Qcm9jZXNzUXVldWU6IHRydWUsXHJcbiAgICAgICAgICAgIG1heEZpbGVzaXplOiBGbGVldENhcnQubWF4RmlsZVNpemUsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZHJvcHpvbmUub24oJ3NlbmRpbmcnLCB0aGlzLnNlbmRpbmcpO1xyXG4gICAgICAgIHRoaXMuZHJvcHpvbmUub24oJ3N1Y2Nlc3MnLCB0aGlzLnN1Y2Nlc3MpO1xyXG4gICAgICAgIHRoaXMuZHJvcHpvbmUub24oJ2Vycm9yJywgdGhpcy5lcnJvcik7XHJcbiAgICB9XHJcblxyXG4gICAgc2VuZGluZyhmaWxlLCB4aHIpIHtcclxuICAgICAgICB4aHIudGltZW91dCA9IDM2MDAwMDA7XHJcblxyXG4gICAgICAgICQoJy5hbGVydC1kYW5nZXInKS5yZW1vdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBzdWNjZXNzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmdldFVwbG9hZGluZ0ZpbGVzKCkubGVuZ3RoID09PSAwICYmIHRoaXMuZ2V0UXVldWVkRmlsZXMoKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dChEYXRhVGFibGUucmVsb2FkLCAxMDAwLCAnI21lZGlhLXRhYmxlIC50YWJsZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlcnJvcihmaWxlLCByZXNwb25zZSkge1xyXG4gICAgICAgICQoJy5kei1wcm9ncmVzcycpLmNzcygnei1pbmRleCcsIDEpO1xyXG4gICAgICAgICQoZmlsZS5wcmV2aWV3RWxlbWVudCkuZmluZCgnLmR6LWVycm9yLW1lc3NhZ2UnKS50ZXh0KHJlc3BvbnNlLm1lc3NhZ2UpO1xyXG4gICAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJEcm9wem9uZSIsIl9kZWZhdWx0IiwiX2NsYXNzQ2FsbENoZWNrIiwiYXV0b0Rpc2NvdmVyIiwiZHJvcHpvbmUiLCJ1cmwiLCJyb3V0ZSIsImF1dG9Qcm9jZXNzUXVldWUiLCJtYXhGaWxlc2l6ZSIsIkZsZWV0Q2FydCIsIm1heEZpbGVTaXplIiwib24iLCJzZW5kaW5nIiwic3VjY2VzcyIsImVycm9yIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJmaWxlIiwieGhyIiwidGltZW91dCIsIiQiLCJyZW1vdmUiLCJnZXRVcGxvYWRpbmdGaWxlcyIsImxlbmd0aCIsImdldFF1ZXVlZEZpbGVzIiwic2V0VGltZW91dCIsIkRhdGFUYWJsZSIsInJlbG9hZCIsInJlc3BvbnNlIiwiY3NzIiwicHJldmlld0VsZW1lbnQiLCJmaW5kIiwidGV4dCIsIm1lc3NhZ2UiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Modules/Media/Resources/assets/admin/js/Uploader.js\n");

/***/ }),

/***/ "./Modules/Media/Resources/assets/admin/js/main.js":
/*!*********************************************************!*\
  !*** ./Modules/Media/Resources/assets/admin/js/main.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ImagePicker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ImagePicker */ \"./Modules/Media/Resources/assets/admin/js/ImagePicker.js\");\n/* harmony import */ var _MediaPicker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MediaPicker */ \"./Modules/Media/Resources/assets/admin/js/MediaPicker.js\");\n/* harmony import */ var _Uploader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Uploader */ \"./Modules/Media/Resources/assets/admin/js/Uploader.js\");\n\n\n\nwindow.MediaPicker = _MediaPicker__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\nif ($('.image-picker').length !== 0) {\n  new _ImagePicker__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n}\nif ($('.dropzone').length !== 0) {\n  new _Uploader__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Nb2R1bGVzL01lZGlhL1Jlc291cmNlcy9hc3NldHMvYWRtaW4vanMvbWFpbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQXdDO0FBQ0E7QUFDTjtBQUVsQ0csTUFBTSxDQUFDRixXQUFXLEdBQUdBLG9EQUFXO0FBRWhDLElBQUlHLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQ0MsTUFBTSxLQUFLLENBQUMsRUFBRTtFQUNqQyxJQUFJTCxvREFBVyxDQUFDLENBQUM7QUFDckI7QUFFQSxJQUFJSSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUNDLE1BQU0sS0FBSyxDQUFDLEVBQUU7RUFDN0IsSUFBSUgsaURBQVEsQ0FBQyxDQUFDO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxlZXRjYXJ0Ly4vTW9kdWxlcy9NZWRpYS9SZXNvdXJjZXMvYXNzZXRzL2FkbWluL2pzL21haW4uanM/MjM5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSW1hZ2VQaWNrZXIgZnJvbSAnLi9JbWFnZVBpY2tlcic7XHJcbmltcG9ydCBNZWRpYVBpY2tlciBmcm9tICcuL01lZGlhUGlja2VyJztcclxuaW1wb3J0IFVwbG9hZGVyIGZyb20gJy4vVXBsb2FkZXInO1xyXG5cclxud2luZG93Lk1lZGlhUGlja2VyID0gTWVkaWFQaWNrZXI7XHJcblxyXG5pZiAoJCgnLmltYWdlLXBpY2tlcicpLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgbmV3IEltYWdlUGlja2VyKCk7XHJcbn1cclxuXHJcbmlmICgkKCcuZHJvcHpvbmUnKS5sZW5ndGggIT09IDApIHtcclxuICAgIG5ldyBVcGxvYWRlcigpO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJJbWFnZVBpY2tlciIsIk1lZGlhUGlja2VyIiwiVXBsb2FkZXIiLCJ3aW5kb3ciLCIkIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Modules/Media/Resources/assets/admin/js/main.js\n");

/***/ }),

/***/ "./node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-28[0].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-28[0].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-28[0].rules[0].use[3]!./Modules/Media/Resources/assets/admin/sass/media-picker.scss":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-28[0].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-28[0].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-28[0].rules[0].use[3]!./Modules/Media/Resources/assets/admin/sass/media-picker.scss ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_laravel_mix_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../node_modules/laravel-mix/node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ \"./node_modules/laravel-mix/node_modules/css-loader/dist/runtime/cssWithMappingToString.js\");\n/* harmony import */ var _node_modules_laravel_mix_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_laravel_mix_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_laravel_mix_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../node_modules/laravel-mix/node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/laravel-mix/node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_laravel_mix_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_laravel_mix_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_laravel_mix_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_laravel_mix_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".file-manager-iframe {\\n  width: 100%;\\n  vertical-align: bottom;\\n}\\n\\n.file-manager {\\n  background: #f9f9f9;\\n  margin-top: 20px;\\n  overflow-x: auto;\\n}\\n.file-manager #notification-toast {\\n  bottom: 0;\\n}\\n.file-manager .dataTable .btn {\\n  padding: 10px 16px 8px;\\n}\\n.file-manager .dataTable .btn > i {\\n  margin-top: 5px;\\n}\\n\\n.media-picker-modal {\\n  padding-right: 0 !important;\\n  z-index: 1050;\\n}\\n.media-picker-modal > i {\\n  margin-right: 5px;\\n}\\n.media-picker-modal .modal-dialog {\\n  width: auto;\\n  margin: 25px auto;\\n}\\n.media-picker-modal .modal-content {\\n  margin: auto;\\n  float: none;\\n  border: 1px solid #d2d6de;\\n  border-radius: 3px;\\n}\\n.media-picker-modal .modal-header {\\n  padding: 6px 15px;\\n  background: #f1f1f1;\\n}\\n.media-picker-modal .modal-header > .close {\\n  margin-top: 5px;\\n  -webkit-text-stroke: 0;\\n  transition: 200ms;\\n}\\n.media-picker-modal .modal-body {\\n  background: #f9f9f9;\\n  padding: 15px 0;\\n}\\n.media-picker-modal .modal.fade .modal-dialog {\\n  transform: scale(0.8);\\n  opacity: 0;\\n  transition: 200ms ease-in-out;\\n}\\n.media-picker-modal .modal.fade .modal-dialog.in .modal-dialog {\\n  transform: scale(1);\\n  opacity: 1;\\n}\\n\\n@media screen and (max-width: 767px) {\\n  .media-picker-modal .modal-dialog {\\n    margin: 10px;\\n  }\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./Modules/Media/Resources/assets/admin/sass/media-picker.scss\"],\"names\":[],\"mappings\":\"AAAA;EACC,WAAA;EACA,sBAAA;AACD;;AAEA;EACC,mBAAA;EACG,gBAAA;EACA,gBAAA;AACJ;AACI;EACI,SAAA;AACR;AAGQ;EACI,sBAAA;AADZ;AAGY;EACI,eAAA;AADhB;;AAOA;EACI,2BAAA;EACA,aAAA;AAJJ;AAMI;EACI,iBAAA;AAJR;AAOI;EACI,WAAA;EACA,iBAAA;AALR;AAQI;EACI,YAAA;EACA,WAAA;EACA,yBAAA;EACA,kBAAA;AANR;AASI;EACI,iBAAA;EACA,mBAAA;AAPR;AASQ;EACI,eAAA;EACA,sBAAA;EACA,iBAAA;AAPZ;AAWI;EACI,mBAAA;EACA,eAAA;AATR;AAYI;EACI,qBAAA;EACA,UAAA;EACA,6BAAA;AAVR;AAYQ;EACI,mBAAA;EACA,UAAA;AAVZ;;AAeA;EACC;IACC,YAAA;EAZA;AACF\",\"sourcesContent\":[\".file-manager-iframe {\\r\\n\\twidth: 100%;\\r\\n\\tvertical-align: bottom;\\r\\n}\\r\\n\\r\\n.file-manager {\\r\\n\\tbackground: #f9f9f9;\\r\\n    margin-top: 20px;\\r\\n    overflow-x: auto;\\r\\n\\r\\n    #notification-toast {\\r\\n        bottom: 0;\\r\\n    }\\r\\n\\r\\n    .dataTable {\\r\\n        .btn {\\r\\n            padding: 10px 16px 8px;\\r\\n\\r\\n            > i {\\r\\n                margin-top: 5px;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n.media-picker-modal {\\r\\n    padding-right: 0 !important;\\r\\n    z-index: 1050;\\r\\n\\r\\n    > i {\\r\\n        margin-right: 5px;\\r\\n    }\\r\\n\\r\\n    .modal-dialog {\\r\\n        width: auto;\\r\\n        margin: 25px auto;\\r\\n    }\\r\\n\\r\\n    .modal-content {\\r\\n        margin: auto;\\r\\n        float: none;\\r\\n        border: 1px solid #d2d6de;\\r\\n        border-radius: 3px;\\r\\n    }\\r\\n\\r\\n    .modal-header {\\r\\n        padding: 6px 15px;\\r\\n        background: #f1f1f1;\\r\\n\\r\\n        > .close {\\r\\n            margin-top: 5px;\\r\\n            -webkit-text-stroke: 0;\\r\\n            transition: 200ms;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    .modal-body {\\r\\n        background: #f9f9f9;\\r\\n        padding: 15px 0;\\r\\n    }\\r\\n\\r\\n    .modal.fade .modal-dialog {\\r\\n        transform: scale(0.8);\\r\\n        opacity: 0;\\r\\n        transition: 200ms ease-in-out;\\r\\n\\r\\n        &.in .modal-dialog {\\r\\n            transform: scale(1);\\r\\n            opacity: 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n@media screen and (max-width: 767px) {\\r\\n\\t.media-picker-modal .modal-dialog {\\r\\n\\t\\tmargin: 10px;\\r\\n\\t}\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbGFyYXZlbC1taXgvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtMjhbMF0ucnVsZXNbMF0udXNlWzFdIS4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTI4WzBdLnJ1bGVzWzBdLnVzZVsyXSEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC0yOFswXS5ydWxlc1swXS51c2VbM10hLi9Nb2R1bGVzL01lZGlhL1Jlc291cmNlcy9hc3NldHMvYWRtaW4vc2Fzcy9tZWRpYS1waWNrZXIuc2NzcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQzhKO0FBQzdCO0FBQ2pJLDhCQUE4Qiw0R0FBMkIsQ0FBQyxpSUFBcUM7QUFDL0Y7QUFDQSxnRUFBZ0UsZ0JBQWdCLDJCQUEyQixHQUFHLG1CQUFtQix3QkFBd0IscUJBQXFCLHFCQUFxQixHQUFHLHFDQUFxQyxjQUFjLEdBQUcsaUNBQWlDLDJCQUEyQixHQUFHLHFDQUFxQyxvQkFBb0IsR0FBRyx5QkFBeUIsZ0NBQWdDLGtCQUFrQixHQUFHLDJCQUEyQixzQkFBc0IsR0FBRyxxQ0FBcUMsZ0JBQWdCLHNCQUFzQixHQUFHLHNDQUFzQyxpQkFBaUIsZ0JBQWdCLDhCQUE4Qix1QkFBdUIsR0FBRyxxQ0FBcUMsc0JBQXNCLHdCQUF3QixHQUFHLDhDQUE4QyxvQkFBb0IsMkJBQTJCLHNCQUFzQixHQUFHLG1DQUFtQyx3QkFBd0Isb0JBQW9CLEdBQUcsaURBQWlELDBCQUEwQixlQUFlLGtDQUFrQyxHQUFHLGtFQUFrRSx3QkFBd0IsZUFBZSxHQUFHLDBDQUEwQyx1Q0FBdUMsbUJBQW1CLEtBQUssR0FBRyxPQUFPLDhIQUE4SCxVQUFVLFdBQVcsTUFBTSxLQUFLLFdBQVcsV0FBVyxXQUFXLEtBQUssS0FBSyxVQUFVLEtBQUssS0FBSyxXQUFXLEtBQUssS0FBSyxVQUFVLE9BQU8sS0FBSyxXQUFXLFVBQVUsS0FBSyxLQUFLLFdBQVcsS0FBSyxLQUFLLFVBQVUsV0FBVyxLQUFLLEtBQUssVUFBVSxVQUFVLFdBQVcsV0FBVyxLQUFLLEtBQUssV0FBVyxXQUFXLEtBQUssS0FBSyxVQUFVLFdBQVcsV0FBVyxLQUFLLEtBQUssV0FBVyxVQUFVLEtBQUssS0FBSyxXQUFXLFVBQVUsV0FBVyxLQUFLLEtBQUssV0FBVyxVQUFVLE1BQU0sS0FBSyxLQUFLLFVBQVUsS0FBSywrQ0FBK0Msa0JBQWtCLDZCQUE2QixLQUFLLHVCQUF1QiwwQkFBMEIseUJBQXlCLHlCQUF5QixpQ0FBaUMsc0JBQXNCLFNBQVMsd0JBQXdCLGtCQUFrQix1Q0FBdUMseUJBQXlCLG9DQUFvQyxpQkFBaUIsYUFBYSxTQUFTLEtBQUssNkJBQTZCLG9DQUFvQyxzQkFBc0IsaUJBQWlCLDhCQUE4QixTQUFTLDJCQUEyQix3QkFBd0IsOEJBQThCLFNBQVMsNEJBQTRCLHlCQUF5Qix3QkFBd0Isc0NBQXNDLCtCQUErQixTQUFTLDJCQUEyQiw4QkFBOEIsZ0NBQWdDLDBCQUEwQixnQ0FBZ0MsdUNBQXVDLGtDQUFrQyxhQUFhLFNBQVMseUJBQXlCLGdDQUFnQyw0QkFBNEIsU0FBUyx1Q0FBdUMsa0NBQWtDLHVCQUF1QiwwQ0FBMEMsb0NBQW9DLG9DQUFvQywyQkFBMkIsYUFBYSxTQUFTLEtBQUssOENBQThDLHlDQUF5QyxxQkFBcUIsT0FBTyxLQUFLLHVCQUF1QjtBQUNuOEc7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsZWV0Y2FydC8uL01vZHVsZXMvTWVkaWEvUmVzb3VyY2VzL2Fzc2V0cy9hZG1pbi9zYXNzL21lZGlhLXBpY2tlci5zY3NzP2U1YzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sYXJhdmVsLW1peC9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xhcmF2ZWwtbWl4L25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5maWxlLW1hbmFnZXItaWZyYW1lIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgdmVydGljYWwtYWxpZ246IGJvdHRvbTtcXG59XFxuXFxuLmZpbGUtbWFuYWdlciB7XFxuICBiYWNrZ3JvdW5kOiAjZjlmOWY5O1xcbiAgbWFyZ2luLXRvcDogMjBweDtcXG4gIG92ZXJmbG93LXg6IGF1dG87XFxufVxcbi5maWxlLW1hbmFnZXIgI25vdGlmaWNhdGlvbi10b2FzdCB7XFxuICBib3R0b206IDA7XFxufVxcbi5maWxlLW1hbmFnZXIgLmRhdGFUYWJsZSAuYnRuIHtcXG4gIHBhZGRpbmc6IDEwcHggMTZweCA4cHg7XFxufVxcbi5maWxlLW1hbmFnZXIgLmRhdGFUYWJsZSAuYnRuID4gaSB7XFxuICBtYXJnaW4tdG9wOiA1cHg7XFxufVxcblxcbi5tZWRpYS1waWNrZXItbW9kYWwge1xcbiAgcGFkZGluZy1yaWdodDogMCAhaW1wb3J0YW50O1xcbiAgei1pbmRleDogMTA1MDtcXG59XFxuLm1lZGlhLXBpY2tlci1tb2RhbCA+IGkge1xcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxufVxcbi5tZWRpYS1waWNrZXItbW9kYWwgLm1vZGFsLWRpYWxvZyB7XFxuICB3aWR0aDogYXV0bztcXG4gIG1hcmdpbjogMjVweCBhdXRvO1xcbn1cXG4ubWVkaWEtcGlja2VyLW1vZGFsIC5tb2RhbC1jb250ZW50IHtcXG4gIG1hcmdpbjogYXV0bztcXG4gIGZsb2F0OiBub25lO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2QyZDZkZTtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG59XFxuLm1lZGlhLXBpY2tlci1tb2RhbCAubW9kYWwtaGVhZGVyIHtcXG4gIHBhZGRpbmc6IDZweCAxNXB4O1xcbiAgYmFja2dyb3VuZDogI2YxZjFmMTtcXG59XFxuLm1lZGlhLXBpY2tlci1tb2RhbCAubW9kYWwtaGVhZGVyID4gLmNsb3NlIHtcXG4gIG1hcmdpbi10b3A6IDVweDtcXG4gIC13ZWJraXQtdGV4dC1zdHJva2U6IDA7XFxuICB0cmFuc2l0aW9uOiAyMDBtcztcXG59XFxuLm1lZGlhLXBpY2tlci1tb2RhbCAubW9kYWwtYm9keSB7XFxuICBiYWNrZ3JvdW5kOiAjZjlmOWY5O1xcbiAgcGFkZGluZzogMTVweCAwO1xcbn1cXG4ubWVkaWEtcGlja2VyLW1vZGFsIC5tb2RhbC5mYWRlIC5tb2RhbC1kaWFsb2cge1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgwLjgpO1xcbiAgb3BhY2l0eTogMDtcXG4gIHRyYW5zaXRpb246IDIwMG1zIGVhc2UtaW4tb3V0O1xcbn1cXG4ubWVkaWEtcGlja2VyLW1vZGFsIC5tb2RhbC5mYWRlIC5tb2RhbC1kaWFsb2cuaW4gLm1vZGFsLWRpYWxvZyB7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgb3BhY2l0eTogMTtcXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY3cHgpIHtcXG4gIC5tZWRpYS1waWNrZXItbW9kYWwgLm1vZGFsLWRpYWxvZyB7XFxuICAgIG1hcmdpbjogMTBweDtcXG4gIH1cXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vTW9kdWxlcy9NZWRpYS9SZXNvdXJjZXMvYXNzZXRzL2FkbWluL3Nhc3MvbWVkaWEtcGlja2VyLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDQyxXQUFBO0VBQ0Esc0JBQUE7QUFDRDs7QUFFQTtFQUNDLG1CQUFBO0VBQ0csZ0JBQUE7RUFDQSxnQkFBQTtBQUNKO0FBQ0k7RUFDSSxTQUFBO0FBQ1I7QUFHUTtFQUNJLHNCQUFBO0FBRFo7QUFHWTtFQUNJLGVBQUE7QUFEaEI7O0FBT0E7RUFDSSwyQkFBQTtFQUNBLGFBQUE7QUFKSjtBQU1JO0VBQ0ksaUJBQUE7QUFKUjtBQU9JO0VBQ0ksV0FBQTtFQUNBLGlCQUFBO0FBTFI7QUFRSTtFQUNJLFlBQUE7RUFDQSxXQUFBO0VBQ0EseUJBQUE7RUFDQSxrQkFBQTtBQU5SO0FBU0k7RUFDSSxpQkFBQTtFQUNBLG1CQUFBO0FBUFI7QUFTUTtFQUNJLGVBQUE7RUFDQSxzQkFBQTtFQUNBLGlCQUFBO0FBUFo7QUFXSTtFQUNJLG1CQUFBO0VBQ0EsZUFBQTtBQVRSO0FBWUk7RUFDSSxxQkFBQTtFQUNBLFVBQUE7RUFDQSw2QkFBQTtBQVZSO0FBWVE7RUFDSSxtQkFBQTtFQUNBLFVBQUE7QUFWWjs7QUFlQTtFQUNDO0lBQ0MsWUFBQTtFQVpBO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmZpbGUtbWFuYWdlci1pZnJhbWUge1xcclxcblxcdHdpZHRoOiAxMDAlO1xcclxcblxcdHZlcnRpY2FsLWFsaWduOiBib3R0b207XFxyXFxufVxcclxcblxcclxcbi5maWxlLW1hbmFnZXIge1xcclxcblxcdGJhY2tncm91bmQ6ICNmOWY5Zjk7XFxyXFxuICAgIG1hcmdpbi10b3A6IDIwcHg7XFxyXFxuICAgIG92ZXJmbG93LXg6IGF1dG87XFxyXFxuXFxyXFxuICAgICNub3RpZmljYXRpb24tdG9hc3Qge1xcclxcbiAgICAgICAgYm90dG9tOiAwO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5kYXRhVGFibGUge1xcclxcbiAgICAgICAgLmJ0biB7XFxyXFxuICAgICAgICAgICAgcGFkZGluZzogMTBweCAxNnB4IDhweDtcXHJcXG5cXHJcXG4gICAgICAgICAgICA+IGkge1xcclxcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiA1cHg7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi5tZWRpYS1waWNrZXItbW9kYWwge1xcclxcbiAgICBwYWRkaW5nLXJpZ2h0OiAwICFpbXBvcnRhbnQ7XFxyXFxuICAgIHotaW5kZXg6IDEwNTA7XFxyXFxuXFxyXFxuICAgID4gaSB7XFxyXFxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAubW9kYWwtZGlhbG9nIHtcXHJcXG4gICAgICAgIHdpZHRoOiBhdXRvO1xcclxcbiAgICAgICAgbWFyZ2luOiAyNXB4IGF1dG87XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLm1vZGFsLWNvbnRlbnQge1xcclxcbiAgICAgICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICAgICAgZmxvYXQ6IG5vbmU7XFxyXFxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZDJkNmRlO1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5tb2RhbC1oZWFkZXIge1xcclxcbiAgICAgICAgcGFkZGluZzogNnB4IDE1cHg7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kOiAjZjFmMWYxO1xcclxcblxcclxcbiAgICAgICAgPiAuY2xvc2Uge1xcclxcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDVweDtcXHJcXG4gICAgICAgICAgICAtd2Via2l0LXRleHQtc3Ryb2tlOiAwO1xcclxcbiAgICAgICAgICAgIHRyYW5zaXRpb246IDIwMG1zO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5tb2RhbC1ib2R5IHtcXHJcXG4gICAgICAgIGJhY2tncm91bmQ6ICNmOWY5Zjk7XFxyXFxuICAgICAgICBwYWRkaW5nOiAxNXB4IDA7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLm1vZGFsLmZhZGUgLm1vZGFsLWRpYWxvZyB7XFxyXFxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOCk7XFxyXFxuICAgICAgICBvcGFjaXR5OiAwO1xcclxcbiAgICAgICAgdHJhbnNpdGlvbjogMjAwbXMgZWFzZS1pbi1vdXQ7XFxyXFxuXFxyXFxuICAgICAgICAmLmluIC5tb2RhbC1kaWFsb2cge1xcclxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XFxyXFxuICAgICAgICAgICAgb3BhY2l0eTogMTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjdweCkge1xcclxcblxcdC5tZWRpYS1waWNrZXItbW9kYWwgLm1vZGFsLWRpYWxvZyB7XFxyXFxuXFx0XFx0bWFyZ2luOiAxMHB4O1xcclxcblxcdH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-28[0].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-28[0].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-28[0].rules[0].use[3]!./Modules/Media/Resources/assets/admin/sass/media-picker.scss\n");

/***/ }),

/***/ "./node_modules/laravel-mix/node_modules/css-loader/dist/runtime/api.js":
/*!******************************************************************************!*\
  !*** ./node_modules/laravel-mix/node_modules/css-loader/dist/runtime/api.js ***!
  \******************************************************************************/
/***/ ((module) => {

eval("\r\n\r\n/*\r\n  MIT License http://www.opensource.org/licenses/mit-license.php\r\n  Author Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\n// eslint-disable-next-line func-names\r\nmodule.exports = function (cssWithMappingToString) {\r\n  var list = []; // return the list of modules as css string\r\n\r\n  list.toString = function toString() {\r\n    return this.map(function (item) {\r\n      var content = cssWithMappingToString(item);\r\n\r\n      if (item[2]) {\r\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\r\n      }\r\n\r\n      return content;\r\n    }).join(\"\");\r\n  }; // import a list of modules into the list\r\n  // eslint-disable-next-line func-names\r\n\r\n\r\n  list.i = function (modules, mediaQuery, dedupe) {\r\n    if (typeof modules === \"string\") {\r\n      // eslint-disable-next-line no-param-reassign\r\n      modules = [[null, modules, \"\"]];\r\n    }\r\n\r\n    var alreadyImportedModules = {};\r\n\r\n    if (dedupe) {\r\n      for (var i = 0; i < this.length; i++) {\r\n        // eslint-disable-next-line prefer-destructuring\r\n        var id = this[i][0];\r\n\r\n        if (id != null) {\r\n          alreadyImportedModules[id] = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (var _i = 0; _i < modules.length; _i++) {\r\n      var item = [].concat(modules[_i]);\r\n\r\n      if (dedupe && alreadyImportedModules[item[0]]) {\r\n        // eslint-disable-next-line no-continue\r\n        continue;\r\n      }\r\n\r\n      if (mediaQuery) {\r\n        if (!item[2]) {\r\n          item[2] = mediaQuery;\r\n        } else {\r\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\r\n        }\r\n      }\r\n\r\n      list.push(item);\r\n    }\r\n  };\r\n\r\n  return list;\r\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbGFyYXZlbC1taXgvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLHFCQUFxQjtBQUNqRTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsZWV0Y2FydC8uL25vZGVfbW9kdWxlcy9sYXJhdmVsLW1peC9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzBmY2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vKlxyXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXHJcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxyXG4qL1xyXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XHJcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xyXG5cclxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xyXG5cclxuICAgICAgaWYgKGl0ZW1bMl0pIHtcclxuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgICB9KS5qb2luKFwiXCIpO1xyXG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcclxuXHJcblxyXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcclxuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cclxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XHJcblxyXG4gICAgaWYgKGRlZHVwZSkge1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcclxuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xyXG5cclxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XHJcblxyXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcclxuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcclxuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIGxpc3Q7XHJcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/laravel-mix/node_modules/css-loader/dist/runtime/api.js\n");

/***/ }),

/***/ "./node_modules/laravel-mix/node_modules/css-loader/dist/runtime/cssWithMappingToString.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/laravel-mix/node_modules/css-loader/dist/runtime/cssWithMappingToString.js ***!
  \*************************************************************************************************/
/***/ ((module) => {

eval("\r\n\r\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\r\n\r\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\r\n\r\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\r\n\r\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\r\n\r\nmodule.exports = function cssWithMappingToString(item) {\r\n  var _item = _slicedToArray(item, 4),\r\n      content = _item[1],\r\n      cssMapping = _item[3];\r\n\r\n  if (!cssMapping) {\r\n    return content;\r\n  }\r\n\r\n  if (typeof btoa === \"function\") {\r\n    // eslint-disable-next-line no-undef\r\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\r\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\r\n    var sourceMapping = \"/*# \".concat(data, \" */\");\r\n    var sourceURLs = cssMapping.sources.map(function (source) {\r\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || \"\").concat(source, \" */\");\r\n    });\r\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\"\\n\");\r\n  }\r\n\r\n  return [content].join(\"\\n\");\r\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbGFyYXZlbC1taXgvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLGtDQUFrQztBQUNsQztBQUNBLDhCQUE4QjtBQUM5QjtBQUNBLGtEQUFrRCxnQkFBZ0IsZ0VBQWdFLHdEQUF3RCw2REFBNkQsc0RBQXNEO0FBQzdTO0FBQ0EsdUNBQXVDLHVEQUF1RCx1Q0FBdUMsU0FBUyxPQUFPLG9CQUFvQjtBQUN6SztBQUNBLHlDQUF5Qyw4RkFBOEYsd0JBQXdCLGVBQWUsZUFBZSxnQkFBZ0IsWUFBWSxNQUFNLHdCQUF3QiwrQkFBK0IsYUFBYSxxQkFBcUIsdUNBQXVDLGNBQWMsV0FBVyxZQUFZLFVBQVUsTUFBTSxtREFBbUQsVUFBVSxzQkFBc0I7QUFDdmU7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsZWV0Y2FydC8uL25vZGVfbW9kdWxlcy9sYXJhdmVsLW1peC9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcz9lZjZkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cclxuXHJcbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cclxuXHJcbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxyXG5cclxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XHJcblxyXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciAmJiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdKTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxyXG5cclxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xyXG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxyXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXHJcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcclxuXHJcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XHJcbiAgICByZXR1cm4gY29udGVudDtcclxuICB9XHJcblxyXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcclxuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcclxuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xyXG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xyXG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/laravel-mix/node_modules/css-loader/dist/runtime/cssWithMappingToString.js\n");

/***/ }),

/***/ "./Modules/Media/Resources/assets/admin/sass/media-picker.scss":
/*!*********************************************************************!*\
  !*** ./Modules/Media/Resources/assets/admin/sass/media-picker.scss ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_laravel_mix_node_modules_css_loader_dist_cjs_js_clonedRuleSet_28_0_rules_0_use_1_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_28_0_rules_0_use_2_node_modules_sass_loader_dist_cjs_js_clonedRuleSet_28_0_rules_0_use_3_media_picker_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../../../../node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-28[0].rules[0].use[1]!../../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-28[0].rules[0].use[2]!../../../../../../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-28[0].rules[0].use[3]!./media-picker.scss */ \"./node_modules/laravel-mix/node_modules/css-loader/dist/cjs.js??clonedRuleSet-28[0].rules[0].use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-28[0].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-28[0].rules[0].use[3]!./Modules/Media/Resources/assets/admin/sass/media-picker.scss\");\n\n            \n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_laravel_mix_node_modules_css_loader_dist_cjs_js_clonedRuleSet_28_0_rules_0_use_1_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_28_0_rules_0_use_2_node_modules_sass_loader_dist_cjs_js_clonedRuleSet_28_0_rules_0_use_3_media_picker_scss__WEBPACK_IMPORTED_MODULE_1__[\"default\"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_laravel_mix_node_modules_css_loader_dist_cjs_js_clonedRuleSet_28_0_rules_0_use_1_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_28_0_rules_0_use_2_node_modules_sass_loader_dist_cjs_js_clonedRuleSet_28_0_rules_0_use_3_media_picker_scss__WEBPACK_IMPORTED_MODULE_1__[\"default\"].locals || {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Nb2R1bGVzL01lZGlhL1Jlc291cmNlcy9hc3NldHMvYWRtaW4vc2Fzcy9tZWRpYS1waWNrZXIuc2NzcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdHO0FBQ3hHLFlBQXVXOztBQUV2Vzs7QUFFQTtBQUNBOztBQUVBLGFBQWEsMEdBQUcsQ0FBQyx1U0FBTzs7OztBQUl4QixpRUFBZSx1U0FBTyxhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxlZXRjYXJ0Ly4vTW9kdWxlcy9NZWRpYS9SZXNvdXJjZXMvYXNzZXRzL2FkbWluL3Nhc3MvbWVkaWEtcGlja2VyLnNjc3M/MWY4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGFyYXZlbC1taXgvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtMjhbMF0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC0yOFswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTI4WzBdLnJ1bGVzWzBdLnVzZVszXSEuL21lZGlhLXBpY2tlci5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./Modules/Media/Resources/assets/admin/sass/media-picker.scss\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nvar isOldIE = function isOldIE() {\r\n  var memo;\r\n  return function memorize() {\r\n    if (typeof memo === 'undefined') {\r\n      // Test for IE <= 9 as proposed by Browserhacks\r\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\r\n      // Tests for existence of standard globals is to allow style-loader\r\n      // to operate correctly into non-standard environments\r\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\r\n      memo = Boolean(window && document && document.all && !window.atob);\r\n    }\r\n\r\n    return memo;\r\n  };\r\n}();\r\n\r\nvar getTarget = function getTarget() {\r\n  var memo = {};\r\n  return function memorize(target) {\r\n    if (typeof memo[target] === 'undefined') {\r\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\r\n\r\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\r\n        try {\r\n          // This will throw an exception if access to iframe is blocked\r\n          // due to cross-origin restrictions\r\n          styleTarget = styleTarget.contentDocument.head;\r\n        } catch (e) {\r\n          // istanbul ignore next\r\n          styleTarget = null;\r\n        }\r\n      }\r\n\r\n      memo[target] = styleTarget;\r\n    }\r\n\r\n    return memo[target];\r\n  };\r\n}();\r\n\r\nvar stylesInDom = [];\r\n\r\nfunction getIndexByIdentifier(identifier) {\r\n  var result = -1;\r\n\r\n  for (var i = 0; i < stylesInDom.length; i++) {\r\n    if (stylesInDom[i].identifier === identifier) {\r\n      result = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction modulesToDom(list, options) {\r\n  var idCountMap = {};\r\n  var identifiers = [];\r\n\r\n  for (var i = 0; i < list.length; i++) {\r\n    var item = list[i];\r\n    var id = options.base ? item[0] + options.base : item[0];\r\n    var count = idCountMap[id] || 0;\r\n    var identifier = \"\".concat(id, \" \").concat(count);\r\n    idCountMap[id] = count + 1;\r\n    var index = getIndexByIdentifier(identifier);\r\n    var obj = {\r\n      css: item[1],\r\n      media: item[2],\r\n      sourceMap: item[3]\r\n    };\r\n\r\n    if (index !== -1) {\r\n      stylesInDom[index].references++;\r\n      stylesInDom[index].updater(obj);\r\n    } else {\r\n      stylesInDom.push({\r\n        identifier: identifier,\r\n        updater: addStyle(obj, options),\r\n        references: 1\r\n      });\r\n    }\r\n\r\n    identifiers.push(identifier);\r\n  }\r\n\r\n  return identifiers;\r\n}\r\n\r\nfunction insertStyleElement(options) {\r\n  var style = document.createElement('style');\r\n  var attributes = options.attributes || {};\r\n\r\n  if (typeof attributes.nonce === 'undefined') {\r\n    var nonce =  true ? __webpack_require__.nc : 0;\r\n\r\n    if (nonce) {\r\n      attributes.nonce = nonce;\r\n    }\r\n  }\r\n\r\n  Object.keys(attributes).forEach(function (key) {\r\n    style.setAttribute(key, attributes[key]);\r\n  });\r\n\r\n  if (typeof options.insert === 'function') {\r\n    options.insert(style);\r\n  } else {\r\n    var target = getTarget(options.insert || 'head');\r\n\r\n    if (!target) {\r\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\r\n    }\r\n\r\n    target.appendChild(style);\r\n  }\r\n\r\n  return style;\r\n}\r\n\r\nfunction removeStyleElement(style) {\r\n  // istanbul ignore if\r\n  if (style.parentNode === null) {\r\n    return false;\r\n  }\r\n\r\n  style.parentNode.removeChild(style);\r\n}\r\n/* istanbul ignore next  */\r\n\r\n\r\nvar replaceText = function replaceText() {\r\n  var textStore = [];\r\n  return function replace(index, replacement) {\r\n    textStore[index] = replacement;\r\n    return textStore.filter(Boolean).join('\\n');\r\n  };\r\n}();\r\n\r\nfunction applyToSingletonTag(style, index, remove, obj) {\r\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\r\n\r\n  /* istanbul ignore if  */\r\n\r\n  if (style.styleSheet) {\r\n    style.styleSheet.cssText = replaceText(index, css);\r\n  } else {\r\n    var cssNode = document.createTextNode(css);\r\n    var childNodes = style.childNodes;\r\n\r\n    if (childNodes[index]) {\r\n      style.removeChild(childNodes[index]);\r\n    }\r\n\r\n    if (childNodes.length) {\r\n      style.insertBefore(cssNode, childNodes[index]);\r\n    } else {\r\n      style.appendChild(cssNode);\r\n    }\r\n  }\r\n}\r\n\r\nfunction applyToTag(style, options, obj) {\r\n  var css = obj.css;\r\n  var media = obj.media;\r\n  var sourceMap = obj.sourceMap;\r\n\r\n  if (media) {\r\n    style.setAttribute('media', media);\r\n  } else {\r\n    style.removeAttribute('media');\r\n  }\r\n\r\n  if (sourceMap && typeof btoa !== 'undefined') {\r\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\r\n  } // For old IE\r\n\r\n  /* istanbul ignore if  */\r\n\r\n\r\n  if (style.styleSheet) {\r\n    style.styleSheet.cssText = css;\r\n  } else {\r\n    while (style.firstChild) {\r\n      style.removeChild(style.firstChild);\r\n    }\r\n\r\n    style.appendChild(document.createTextNode(css));\r\n  }\r\n}\r\n\r\nvar singleton = null;\r\nvar singletonCounter = 0;\r\n\r\nfunction addStyle(obj, options) {\r\n  var style;\r\n  var update;\r\n  var remove;\r\n\r\n  if (options.singleton) {\r\n    var styleIndex = singletonCounter++;\r\n    style = singleton || (singleton = insertStyleElement(options));\r\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\r\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\r\n  } else {\r\n    style = insertStyleElement(options);\r\n    update = applyToTag.bind(null, style, options);\r\n\r\n    remove = function remove() {\r\n      removeStyleElement(style);\r\n    };\r\n  }\r\n\r\n  update(obj);\r\n  return function updateStyle(newObj) {\r\n    if (newObj) {\r\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\r\n        return;\r\n      }\r\n\r\n      update(obj = newObj);\r\n    } else {\r\n      remove();\r\n    }\r\n  };\r\n}\r\n\r\nmodule.exports = function (list, options) {\r\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n  // tags it will allow on a page\r\n\r\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\r\n    options.singleton = isOldIE();\r\n  }\r\n\r\n  list = list || [];\r\n  var lastIdentifiers = modulesToDom(list, options);\r\n  return function update(newList) {\r\n    newList = newList || [];\r\n\r\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\r\n      return;\r\n    }\r\n\r\n    for (var i = 0; i < lastIdentifiers.length; i++) {\r\n      var identifier = lastIdentifiers[i];\r\n      var index = getIndexByIdentifier(identifier);\r\n      stylesInDom[index].references--;\r\n    }\r\n\r\n    var newLastIdentifiers = modulesToDom(newList, options);\r\n\r\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\r\n      var _identifier = lastIdentifiers[_i];\r\n\r\n      var _index = getIndexByIdentifier(_identifier);\r\n\r\n      if (stylesInDom[_index].references === 0) {\r\n        stylesInDom[_index].updater();\r\n\r\n        stylesInDom.splice(_index, 1);\r\n      }\r\n    }\r\n\r\n    lastIdentifiers = newLastIdentifiers;\r\n  };\r\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./Modules/Media/Resources/assets/admin/js/main.js");
/******/ 	
/******/ })()
;